/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type ModifyPositionOrderParamsStruct = {
  orderId: PromiseOrValue<BigNumberish>;
  positionId: PromiseOrValue<BytesLike>;
  limitPrice: PromiseOrValue<BigNumberish>;
  tpPriceDiff: PromiseOrValue<BigNumberish>;
  slPriceDiff: PromiseOrValue<BigNumberish>;
};

export type ModifyPositionOrderParamsStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  orderId: BigNumber;
  positionId: string;
  limitPrice: BigNumber;
  tpPriceDiff: BigNumber;
  slPriceDiff: BigNumber;
};

export type PositionOrderParamsStruct = {
  positionId: PromiseOrValue<BytesLike>;
  marketId: PromiseOrValue<BytesLike>;
  size: PromiseOrValue<BigNumberish>;
  flags: PromiseOrValue<BigNumberish>;
  limitPrice: PromiseOrValue<BigNumberish>;
  expiration: PromiseOrValue<BigNumberish>;
  lastConsumedToken: PromiseOrValue<string>;
  collateralToken: PromiseOrValue<string>;
  collateralAmount: PromiseOrValue<BigNumberish>;
  withdrawUsd: PromiseOrValue<BigNumberish>;
  withdrawSwapToken: PromiseOrValue<string>;
  withdrawSwapSlippage: PromiseOrValue<BigNumberish>;
  tpPriceDiff: PromiseOrValue<BigNumberish>;
  slPriceDiff: PromiseOrValue<BigNumberish>;
  tpslExpiration: PromiseOrValue<BigNumberish>;
  tpslFlags: PromiseOrValue<BigNumberish>;
  tpslWithdrawSwapToken: PromiseOrValue<string>;
  tpslWithdrawSwapSlippage: PromiseOrValue<BigNumberish>;
};

export type PositionOrderParamsStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber
] & {
  positionId: string;
  marketId: string;
  size: BigNumber;
  flags: BigNumber;
  limitPrice: BigNumber;
  expiration: BigNumber;
  lastConsumedToken: string;
  collateralToken: string;
  collateralAmount: BigNumber;
  withdrawUsd: BigNumber;
  withdrawSwapToken: string;
  withdrawSwapSlippage: BigNumber;
  tpPriceDiff: BigNumber;
  slPriceDiff: BigNumber;
  tpslExpiration: BigNumber;
  tpslFlags: BigNumber;
  tpslWithdrawSwapToken: string;
  tpslWithdrawSwapSlippage: BigNumber;
};

export type WithdrawalOrderParamsStruct = {
  positionId: PromiseOrValue<BytesLike>;
  tokenAddress: PromiseOrValue<string>;
  rawAmount: PromiseOrValue<BigNumberish>;
  isUnwrapWeth: PromiseOrValue<boolean>;
  lastConsumedToken: PromiseOrValue<string>;
  withdrawSwapToken: PromiseOrValue<string>;
  withdrawSwapSlippage: PromiseOrValue<BigNumberish>;
};

export type WithdrawalOrderParamsStructOutput = [
  string,
  string,
  BigNumber,
  boolean,
  string,
  string,
  BigNumber
] & {
  positionId: string;
  tokenAddress: string;
  rawAmount: BigNumber;
  isUnwrapWeth: boolean;
  lastConsumedToken: string;
  withdrawSwapToken: string;
  withdrawSwapSlippage: BigNumber;
};

export type WithdrawAllOrderParamsStruct = {
  positionId: PromiseOrValue<BytesLike>;
  isUnwrapWeth: PromiseOrValue<boolean>;
};

export type WithdrawAllOrderParamsStructOutput = [string, boolean] & {
  positionId: string;
  isUnwrapWeth: boolean;
};

export declare namespace Delegator {
  export type DelegationStruct = {
    delegator: PromiseOrValue<string>;
    actionCount: PromiseOrValue<BigNumberish>;
  };

  export type DelegationStructOutput = [string, BigNumber] & {
    delegator: string;
    actionCount: BigNumber;
  };
}

export interface DelegatorInterface extends utils.Interface {
  functions: {
    "delegate(address,uint256)": FunctionFragment;
    "getDelegationByOwner(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "mux3CancelOrder(uint64)": FunctionFragment;
    "mux3DepositCollateral(bytes32,address,uint256)": FunctionFragment;
    "mux3DepositGas(address,uint256)": FunctionFragment;
    "mux3ModifyPositionOrder((uint64,bytes32,uint256,uint256,uint256))": FunctionFragment;
    "mux3PlacePositionOrder((bytes32,bytes32,uint256,uint256,uint256,uint64,address,address,uint256,uint256,address,uint256,uint256,uint256,uint64,uint256,address,uint256),bytes32)": FunctionFragment;
    "mux3PlaceWithdrawalOrder((bytes32,address,uint256,bool,address,address,uint256))": FunctionFragment;
    "mux3SetInitialLeverage(bytes32,bytes32,uint256)": FunctionFragment;
    "mux3TransferToken(address,address,uint256)": FunctionFragment;
    "mux3WithdrawAllCollateral((bytes32,bool))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "delegate"
      | "getDelegationByOwner"
      | "initialize"
      | "multicall"
      | "mux3CancelOrder"
      | "mux3DepositCollateral"
      | "mux3DepositGas"
      | "mux3ModifyPositionOrder"
      | "mux3PlacePositionOrder"
      | "mux3PlaceWithdrawalOrder"
      | "mux3SetInitialLeverage"
      | "mux3TransferToken"
      | "mux3WithdrawAllCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "delegate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationByOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mux3CancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mux3DepositCollateral",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mux3DepositGas",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mux3ModifyPositionOrder",
    values: [ModifyPositionOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mux3PlacePositionOrder",
    values: [PositionOrderParamsStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "mux3PlaceWithdrawalOrder",
    values: [WithdrawalOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mux3SetInitialLeverage",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mux3TransferToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mux3WithdrawAllCollateral",
    values: [WithdrawAllOrderParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mux3CancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mux3DepositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mux3DepositGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mux3ModifyPositionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mux3PlacePositionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mux3PlaceWithdrawalOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mux3SetInitialLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mux3TransferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mux3WithdrawAllCollateral",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "SetDelegator(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDelegator"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface SetDelegatorEventObject {
  owner: string;
  delegator: string;
  actionCount: BigNumber;
}
export type SetDelegatorEvent = TypedEvent<
  [string, string, BigNumber],
  SetDelegatorEventObject
>;

export type SetDelegatorEventFilter = TypedEventFilter<SetDelegatorEvent>;

export interface Delegator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DelegatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delegate(
      delegator: PromiseOrValue<string>,
      actionCount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDelegationByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Delegator.DelegationStructOutput]>;

    initialize(
      mux3OrderBook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      proxyCalls: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mux3CancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mux3DepositCollateral(
      positionId: PromiseOrValue<BytesLike>,
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mux3DepositGas(
      owner: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mux3ModifyPositionOrder(
      orderParams: ModifyPositionOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mux3PlacePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mux3PlaceWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mux3SetInitialLeverage(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      initialLeverage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mux3TransferToken(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mux3WithdrawAllCollateral(
      orderParams: WithdrawAllOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  delegate(
    delegator: PromiseOrValue<string>,
    actionCount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDelegationByOwner(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Delegator.DelegationStructOutput>;

  initialize(
    mux3OrderBook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    proxyCalls: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mux3CancelOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mux3DepositCollateral(
    positionId: PromiseOrValue<BytesLike>,
    collateralToken: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mux3DepositGas(
    owner: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mux3ModifyPositionOrder(
    orderParams: ModifyPositionOrderParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mux3PlacePositionOrder(
    orderParams: PositionOrderParamsStruct,
    referralCode: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mux3PlaceWithdrawalOrder(
    orderParams: WithdrawalOrderParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mux3SetInitialLeverage(
    positionId: PromiseOrValue<BytesLike>,
    marketId: PromiseOrValue<BytesLike>,
    initialLeverage: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mux3TransferToken(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mux3WithdrawAllCollateral(
    orderParams: WithdrawAllOrderParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    delegate(
      delegator: PromiseOrValue<string>,
      actionCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDelegationByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Delegator.DelegationStructOutput>;

    initialize(
      mux3OrderBook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(
      proxyCalls: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    mux3CancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mux3DepositCollateral(
      positionId: PromiseOrValue<BytesLike>,
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mux3DepositGas(
      owner: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mux3ModifyPositionOrder(
      orderParams: ModifyPositionOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mux3PlacePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mux3PlaceWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mux3SetInitialLeverage(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      initialLeverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mux3TransferToken(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mux3WithdrawAllCollateral(
      orderParams: WithdrawAllOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "SetDelegator(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      actionCount?: null
    ): SetDelegatorEventFilter;
    SetDelegator(
      owner?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      actionCount?: null
    ): SetDelegatorEventFilter;
  };

  estimateGas: {
    delegate(
      delegator: PromiseOrValue<string>,
      actionCount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDelegationByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      mux3OrderBook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      proxyCalls: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mux3CancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mux3DepositCollateral(
      positionId: PromiseOrValue<BytesLike>,
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mux3DepositGas(
      owner: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mux3ModifyPositionOrder(
      orderParams: ModifyPositionOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mux3PlacePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mux3PlaceWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mux3SetInitialLeverage(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      initialLeverage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mux3TransferToken(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mux3WithdrawAllCollateral(
      orderParams: WithdrawAllOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delegate(
      delegator: PromiseOrValue<string>,
      actionCount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDelegationByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      mux3OrderBook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      proxyCalls: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mux3CancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mux3DepositCollateral(
      positionId: PromiseOrValue<BytesLike>,
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mux3DepositGas(
      owner: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mux3ModifyPositionOrder(
      orderParams: ModifyPositionOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mux3PlacePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mux3PlaceWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mux3SetInitialLeverage(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      initialLeverage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mux3TransferToken(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mux3WithdrawAllCollateral(
      orderParams: WithdrawAllOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
