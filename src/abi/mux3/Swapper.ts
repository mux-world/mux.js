/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SwapperInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "appendSwapPath(address,address,bytes)": FunctionFragment;
    "balancer2Vault()": FunctionFragment;
    "decodePath(bytes)": FunctionFragment;
    "encodeTokenPair(address,address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "listSwapPath(address,address,uint256,uint256)": FunctionFragment;
    "quote(address,address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBalancer2(address)": FunctionFragment;
    "setSwapPath(address,address,bytes[])": FunctionFragment;
    "setUniswap3(address,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapAndTransfer(address,uint256,address,uint256,address,bool)": FunctionFragment;
    "uniswap3Quoter()": FunctionFragment;
    "uniswap3Router()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "appendSwapPath"
      | "balancer2Vault"
      | "decodePath"
      | "encodeTokenPair"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "listSwapPath"
      | "quote"
      | "renounceRole"
      | "revokeRole"
      | "setBalancer2"
      | "setSwapPath"
      | "setUniswap3"
      | "supportsInterface"
      | "swapAndTransfer"
      | "uniswap3Quoter"
      | "uniswap3Router"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appendSwapPath",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balancer2Vault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodePath",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTokenPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listSwapPath",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBalancer2",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapPath",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswap3",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswap3Quoter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswap3Router",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appendSwapPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancer2Vault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodePath", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listSwapPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBalancer2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswap3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswap3Quoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswap3Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AppendSwapPath(address,address,bytes)": EventFragment;
    "Balancer2Call(address,address,uint256,uint256)": EventFragment;
    "BrokenBalancer2Path(bytes,uint256)": EventFragment;
    "BrokenUniswap3Path(bytes,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MissingSwapPath(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetBalancer2(address)": EventFragment;
    "SetSwapPath(address,address,bytes[])": EventFragment;
    "SetUniswap3(address,address)": EventFragment;
    "SwapFailed(address,uint256,address,uint256,bool,uint256,bool,uint256)": EventFragment;
    "SwapSuccess(address,uint256,address,uint256)": EventFragment;
    "TransferOut(address,uint256,bool)": EventFragment;
    "Uniswap3Call(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppendSwapPath"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Balancer2Call"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrokenBalancer2Path"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrokenUniswap3Path"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MissingSwapPath"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBalancer2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSwapPath"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUniswap3"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Uniswap3Call"): EventFragment;
}

export interface AppendSwapPathEventObject {
  tokenIn: string;
  tokenOut: string;
  path: string;
}
export type AppendSwapPathEvent = TypedEvent<
  [string, string, string],
  AppendSwapPathEventObject
>;

export type AppendSwapPathEventFilter = TypedEventFilter<AppendSwapPathEvent>;

export interface Balancer2CallEventObject {
  tokenIn: string;
  tokenOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type Balancer2CallEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  Balancer2CallEventObject
>;

export type Balancer2CallEventFilter = TypedEventFilter<Balancer2CallEvent>;

export interface BrokenBalancer2PathEventObject {
  path: string;
  amountIn: BigNumber;
}
export type BrokenBalancer2PathEvent = TypedEvent<
  [string, BigNumber],
  BrokenBalancer2PathEventObject
>;

export type BrokenBalancer2PathEventFilter =
  TypedEventFilter<BrokenBalancer2PathEvent>;

export interface BrokenUniswap3PathEventObject {
  path: string;
  amountIn: BigNumber;
}
export type BrokenUniswap3PathEvent = TypedEvent<
  [string, BigNumber],
  BrokenUniswap3PathEventObject
>;

export type BrokenUniswap3PathEventFilter =
  TypedEventFilter<BrokenUniswap3PathEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MissingSwapPathEventObject {
  tokenIn: string;
  tokenOut: string;
}
export type MissingSwapPathEvent = TypedEvent<
  [string, string],
  MissingSwapPathEventObject
>;

export type MissingSwapPathEventFilter = TypedEventFilter<MissingSwapPathEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetBalancer2EventObject {
  balancer2Vault: string;
}
export type SetBalancer2Event = TypedEvent<[string], SetBalancer2EventObject>;

export type SetBalancer2EventFilter = TypedEventFilter<SetBalancer2Event>;

export interface SetSwapPathEventObject {
  tokenIn: string;
  tokenOut: string;
  paths: string[];
}
export type SetSwapPathEvent = TypedEvent<
  [string, string, string[]],
  SetSwapPathEventObject
>;

export type SetSwapPathEventFilter = TypedEventFilter<SetSwapPathEvent>;

export interface SetUniswap3EventObject {
  uniswap3Router: string;
  uniswap3Quoter: string;
}
export type SetUniswap3Event = TypedEvent<
  [string, string],
  SetUniswap3EventObject
>;

export type SetUniswap3EventFilter = TypedEventFilter<SetUniswap3Event>;

export interface SwapFailedEventObject {
  tokenIn: string;
  amountIn: BigNumber;
  tokenOut: string;
  minAmountOut: BigNumber;
  quoteSuccess: boolean;
  quoteBestOutAmount: BigNumber;
  swapSuccess: boolean;
  swapAmountOut: BigNumber;
}
export type SwapFailedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ],
  SwapFailedEventObject
>;

export type SwapFailedEventFilter = TypedEventFilter<SwapFailedEvent>;

export interface SwapSuccessEventObject {
  tokenIn: string;
  amountIn: BigNumber;
  tokenOut: string;
  amountOut: BigNumber;
}
export type SwapSuccessEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  SwapSuccessEventObject
>;

export type SwapSuccessEventFilter = TypedEventFilter<SwapSuccessEvent>;

export interface TransferOutEventObject {
  token: string;
  amount: BigNumber;
  isUnwrapped: boolean;
}
export type TransferOutEvent = TypedEvent<
  [string, BigNumber, boolean],
  TransferOutEventObject
>;

export type TransferOutEventFilter = TypedEventFilter<TransferOutEvent>;

export interface Uniswap3CallEventObject {
  tokenIn: string;
  tokenOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type Uniswap3CallEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  Uniswap3CallEventObject
>;

export type Uniswap3CallEventFilter = TypedEventFilter<Uniswap3CallEvent>;

export interface Swapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    appendSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balancer2Vault(overrides?: CallOverrides): Promise<[string]>;

    decodePath(
      path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { protocol: number; rawPath: string }>;

    encodeTokenPair(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      weth_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { ret: string[] }>;

    quote(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBalancer2(
      balancer2Vault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      paths: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUniswap3(
      uniswap3Router_: PromiseOrValue<string>,
      uniswap3Quoter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapAndTransfer(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswap3Quoter(overrides?: CallOverrides): Promise<[string]>;

    uniswap3Router(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  appendSwapPath(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    path: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balancer2Vault(overrides?: CallOverrides): Promise<string>;

  decodePath(
    path: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[number, string] & { protocol: number; rawPath: string }>;

  encodeTokenPair(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    weth_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listSwapPath(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  quote(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBalancer2(
    balancer2Vault_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapPath(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    paths: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUniswap3(
    uniswap3Router_: PromiseOrValue<string>,
    uniswap3Quoter_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapAndTransfer(
    tokenIn: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    tokenOut: PromiseOrValue<string>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    isUnwrapWeth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswap3Quoter(overrides?: CallOverrides): Promise<string>;

  uniswap3Router(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    appendSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    balancer2Vault(overrides?: CallOverrides): Promise<string>;

    decodePath(
      path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { protocol: number; rawPath: string }>;

    encodeTokenPair(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      weth_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    quote(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        quoteSuccess: boolean;
        bestPathIndex: BigNumber;
        bestPath: string;
        bestOutAmount: BigNumber;
      }
    >;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBalancer2(
      balancer2Vault_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      paths: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUniswap3(
      uniswap3Router_: PromiseOrValue<string>,
      uniswap3Quoter_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapAndTransfer(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    uniswap3Quoter(overrides?: CallOverrides): Promise<string>;

    uniswap3Router(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AppendSwapPath(address,address,bytes)"(
      tokenIn?: null,
      tokenOut?: null,
      path?: null
    ): AppendSwapPathEventFilter;
    AppendSwapPath(
      tokenIn?: null,
      tokenOut?: null,
      path?: null
    ): AppendSwapPathEventFilter;

    "Balancer2Call(address,address,uint256,uint256)"(
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOut?: null
    ): Balancer2CallEventFilter;
    Balancer2Call(
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOut?: null
    ): Balancer2CallEventFilter;

    "BrokenBalancer2Path(bytes,uint256)"(
      path?: null,
      amountIn?: null
    ): BrokenBalancer2PathEventFilter;
    BrokenBalancer2Path(
      path?: null,
      amountIn?: null
    ): BrokenBalancer2PathEventFilter;

    "BrokenUniswap3Path(bytes,uint256)"(
      path?: null,
      amountIn?: null
    ): BrokenUniswap3PathEventFilter;
    BrokenUniswap3Path(
      path?: null,
      amountIn?: null
    ): BrokenUniswap3PathEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MissingSwapPath(address,address)"(
      tokenIn?: null,
      tokenOut?: null
    ): MissingSwapPathEventFilter;
    MissingSwapPath(
      tokenIn?: null,
      tokenOut?: null
    ): MissingSwapPathEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetBalancer2(address)"(balancer2Vault?: null): SetBalancer2EventFilter;
    SetBalancer2(balancer2Vault?: null): SetBalancer2EventFilter;

    "SetSwapPath(address,address,bytes[])"(
      tokenIn?: null,
      tokenOut?: null,
      paths?: null
    ): SetSwapPathEventFilter;
    SetSwapPath(
      tokenIn?: null,
      tokenOut?: null,
      paths?: null
    ): SetSwapPathEventFilter;

    "SetUniswap3(address,address)"(
      uniswap3Router?: null,
      uniswap3Quoter?: null
    ): SetUniswap3EventFilter;
    SetUniswap3(
      uniswap3Router?: null,
      uniswap3Quoter?: null
    ): SetUniswap3EventFilter;

    "SwapFailed(address,uint256,address,uint256,bool,uint256,bool,uint256)"(
      tokenIn?: null,
      amountIn?: null,
      tokenOut?: null,
      minAmountOut?: null,
      quoteSuccess?: null,
      quoteBestOutAmount?: null,
      swapSuccess?: null,
      swapAmountOut?: null
    ): SwapFailedEventFilter;
    SwapFailed(
      tokenIn?: null,
      amountIn?: null,
      tokenOut?: null,
      minAmountOut?: null,
      quoteSuccess?: null,
      quoteBestOutAmount?: null,
      swapSuccess?: null,
      swapAmountOut?: null
    ): SwapFailedEventFilter;

    "SwapSuccess(address,uint256,address,uint256)"(
      tokenIn?: null,
      amountIn?: null,
      tokenOut?: null,
      amountOut?: null
    ): SwapSuccessEventFilter;
    SwapSuccess(
      tokenIn?: null,
      amountIn?: null,
      tokenOut?: null,
      amountOut?: null
    ): SwapSuccessEventFilter;

    "TransferOut(address,uint256,bool)"(
      token?: null,
      amount?: null,
      isUnwrapped?: null
    ): TransferOutEventFilter;
    TransferOut(
      token?: null,
      amount?: null,
      isUnwrapped?: null
    ): TransferOutEventFilter;

    "Uniswap3Call(address,address,uint256,uint256)"(
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOut?: null
    ): Uniswap3CallEventFilter;
    Uniswap3Call(
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOut?: null
    ): Uniswap3CallEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    appendSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balancer2Vault(overrides?: CallOverrides): Promise<BigNumber>;

    decodePath(
      path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeTokenPair(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      weth_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBalancer2(
      balancer2Vault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      paths: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUniswap3(
      uniswap3Router_: PromiseOrValue<string>,
      uniswap3Quoter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapAndTransfer(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswap3Quoter(overrides?: CallOverrides): Promise<BigNumber>;

    uniswap3Router(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appendSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balancer2Vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodePath(
      path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeTokenPair(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      weth_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBalancer2(
      balancer2Vault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapPath(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      paths: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUniswap3(
      uniswap3Router_: PromiseOrValue<string>,
      uniswap3Quoter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapAndTransfer(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswap3Quoter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswap3Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
