/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type OrderDataStruct = {
  id: PromiseOrValue<BigNumberish>;
  account: PromiseOrValue<string>;
  orderType: PromiseOrValue<BigNumberish>;
  version: PromiseOrValue<BigNumberish>;
  placeOrderTime: PromiseOrValue<BigNumberish>;
  gasFeeGwei: PromiseOrValue<BigNumberish>;
  payload: PromiseOrValue<BytesLike>;
};

export type OrderDataStructOutput = [
  BigNumber,
  string,
  number,
  number,
  BigNumber,
  BigNumber,
  string
] & {
  id: BigNumber;
  account: string;
  orderType: number;
  version: number;
  placeOrderTime: BigNumber;
  gasFeeGwei: BigNumber;
  payload: string;
};

export type AdlOrderParamsStruct = {
  positionId: PromiseOrValue<BytesLike>;
  marketId: PromiseOrValue<BytesLike>;
  size: PromiseOrValue<BigNumberish>;
  price: PromiseOrValue<BigNumberish>;
  isUnwrapWeth: PromiseOrValue<boolean>;
};

export type AdlOrderParamsStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  positionId: string;
  marketId: string;
  size: BigNumber;
  price: BigNumber;
  isUnwrapWeth: boolean;
};

export type ModifyPositionOrderParamsStruct = {
  orderId: PromiseOrValue<BigNumberish>;
  positionId: PromiseOrValue<BytesLike>;
  limitPrice: PromiseOrValue<BigNumberish>;
  tpPriceDiff: PromiseOrValue<BigNumberish>;
  slPriceDiff: PromiseOrValue<BigNumberish>;
};

export type ModifyPositionOrderParamsStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  orderId: BigNumber;
  positionId: string;
  limitPrice: BigNumber;
  tpPriceDiff: BigNumber;
  slPriceDiff: BigNumber;
};

export type LiquidityOrderParamsStruct = {
  poolAddress: PromiseOrValue<string>;
  token: PromiseOrValue<string>;
  rawAmount: PromiseOrValue<BigNumberish>;
  isAdding: PromiseOrValue<boolean>;
  isUnwrapWeth: PromiseOrValue<boolean>;
};

export type LiquidityOrderParamsStructOutput = [
  string,
  string,
  BigNumber,
  boolean,
  boolean
] & {
  poolAddress: string;
  token: string;
  rawAmount: BigNumber;
  isAdding: boolean;
  isUnwrapWeth: boolean;
};

export type PositionOrderParamsStruct = {
  positionId: PromiseOrValue<BytesLike>;
  marketId: PromiseOrValue<BytesLike>;
  size: PromiseOrValue<BigNumberish>;
  flags: PromiseOrValue<BigNumberish>;
  limitPrice: PromiseOrValue<BigNumberish>;
  expiration: PromiseOrValue<BigNumberish>;
  lastConsumedToken: PromiseOrValue<string>;
  collateralToken: PromiseOrValue<string>;
  collateralAmount: PromiseOrValue<BigNumberish>;
  withdrawUsd: PromiseOrValue<BigNumberish>;
  withdrawSwapToken: PromiseOrValue<string>;
  withdrawSwapSlippage: PromiseOrValue<BigNumberish>;
  tpPriceDiff: PromiseOrValue<BigNumberish>;
  slPriceDiff: PromiseOrValue<BigNumberish>;
  tpslExpiration: PromiseOrValue<BigNumberish>;
  tpslFlags: PromiseOrValue<BigNumberish>;
  tpslWithdrawSwapToken: PromiseOrValue<string>;
  tpslWithdrawSwapSlippage: PromiseOrValue<BigNumberish>;
};

export type PositionOrderParamsStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber
] & {
  positionId: string;
  marketId: string;
  size: BigNumber;
  flags: BigNumber;
  limitPrice: BigNumber;
  expiration: BigNumber;
  lastConsumedToken: string;
  collateralToken: string;
  collateralAmount: BigNumber;
  withdrawUsd: BigNumber;
  withdrawSwapToken: string;
  withdrawSwapSlippage: BigNumber;
  tpPriceDiff: BigNumber;
  slPriceDiff: BigNumber;
  tpslExpiration: BigNumber;
  tpslFlags: BigNumber;
  tpslWithdrawSwapToken: string;
  tpslWithdrawSwapSlippage: BigNumber;
};

export type RebalanceOrderParamsStruct = {
  poolAddress: PromiseOrValue<string>;
  token0: PromiseOrValue<string>;
  rawAmount0: PromiseOrValue<BigNumberish>;
  maxRawAmount1: PromiseOrValue<BigNumberish>;
  userData: PromiseOrValue<BytesLike>;
};

export type RebalanceOrderParamsStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  poolAddress: string;
  token0: string;
  rawAmount0: BigNumber;
  maxRawAmount1: BigNumber;
  userData: string;
};

export type WithdrawalOrderParamsStruct = {
  positionId: PromiseOrValue<BytesLike>;
  tokenAddress: PromiseOrValue<string>;
  rawAmount: PromiseOrValue<BigNumberish>;
  isUnwrapWeth: PromiseOrValue<boolean>;
  lastConsumedToken: PromiseOrValue<string>;
  withdrawSwapToken: PromiseOrValue<string>;
  withdrawSwapSlippage: PromiseOrValue<BigNumberish>;
};

export type WithdrawalOrderParamsStructOutput = [
  string,
  string,
  BigNumber,
  boolean,
  string,
  string,
  BigNumber
] & {
  positionId: string;
  tokenAddress: string;
  rawAmount: BigNumber;
  isUnwrapWeth: boolean;
  lastConsumedToken: string;
  withdrawSwapToken: string;
  withdrawSwapSlippage: BigNumber;
};

export type PriceRawDataStruct = {
  id: PromiseOrValue<BytesLike>;
  provider: PromiseOrValue<string>;
  rawData: PromiseOrValue<BytesLike>;
};

export type PriceRawDataStructOutput = [string, string, string] & {
  id: string;
  provider: string;
  rawData: string;
};

export type WithdrawAllOrderParamsStruct = {
  positionId: PromiseOrValue<BytesLike>;
  isUnwrapWeth: PromiseOrValue<boolean>;
};

export type WithdrawAllOrderParamsStructOutput = [string, boolean] & {
  positionId: string;
  isUnwrapWeth: boolean;
};

export declare namespace IFacetOpen {
  export type ReallocatePositionArgsStruct = {
    positionId: PromiseOrValue<BytesLike>;
    marketId: PromiseOrValue<BytesLike>;
    fromPool: PromiseOrValue<string>;
    toPool: PromiseOrValue<string>;
    size: PromiseOrValue<BigNumberish>;
    lastConsumedToken: PromiseOrValue<string>;
    isUnwrapWeth: PromiseOrValue<boolean>;
  };

  export type ReallocatePositionArgsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    boolean
  ] & {
    positionId: string;
    marketId: string;
    fromPool: string;
    toPool: string;
    size: BigNumber;
    lastConsumedToken: string;
    isUnwrapWeth: boolean;
  };
}

export interface OrderBookInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "cancelOrder(uint64)": FunctionFragment;
    "configValue(bytes32)": FunctionFragment;
    "depositCollateral(bytes32,address,uint256)": FunctionFragment;
    "depositGas(address,uint256)": FunctionFragment;
    "donateLiquidity(address,address,uint256)": FunctionFragment;
    "fillAdlOrder(bytes32,bytes32,address,bool,bool)": FunctionFragment;
    "fillLiquidityOrder(uint64,(bytes32,bytes32,address,address,uint256,address,bool)[])": FunctionFragment;
    "fillPositionOrder(uint64)": FunctionFragment;
    "fillRebalanceOrder(uint64)": FunctionFragment;
    "fillWithdrawalOrder(uint64)": FunctionFragment;
    "gasBalanceOf(address)": FunctionFragment;
    "getOrder(uint64)": FunctionFragment;
    "getOrders(uint256,uint256)": FunctionFragment;
    "getOrdersOf(address,uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTpslOrders(bytes32,bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "liquidate(bytes32,address,bool,bool)": FunctionFragment;
    "modifyPositionOrder((uint64,bytes32,uint256,uint256,uint256))": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "nextOrderId()": FunctionFragment;
    "placeLiquidityOrder((address,address,uint256,bool,bool))": FunctionFragment;
    "placePositionOrder((bytes32,bytes32,uint256,uint256,uint256,uint64,address,address,uint256,uint256,address,uint256,uint256,uint256,uint64,uint256,address,uint256),bytes32)": FunctionFragment;
    "placeRebalanceOrder((address,address,uint256,uint256,bytes))": FunctionFragment;
    "placeWithdrawalOrder((bytes32,address,uint256,bool,address,address,uint256))": FunctionFragment;
    "reallocate(bytes32,bytes32,address,address,uint256,address,bool)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sequence()": FunctionFragment;
    "setConfig(bytes32,bytes32)": FunctionFragment;
    "setInitialLeverage(bytes32,bytes32,uint256)": FunctionFragment;
    "setPrices((bytes32,address,bytes)[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferToken(address,uint256)": FunctionFragment;
    "transferTokenFrom(address,address,uint256)": FunctionFragment;
    "updateBorrowingFee(bytes32,bytes32,address,bool)": FunctionFragment;
    "withdrawAllCollateral((bytes32,bool))": FunctionFragment;
    "withdrawGas(address,uint256)": FunctionFragment;
    "wrapNative(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "cancelOrder"
      | "configValue"
      | "depositCollateral"
      | "depositGas"
      | "donateLiquidity"
      | "fillAdlOrder"
      | "fillLiquidityOrder"
      | "fillPositionOrder"
      | "fillRebalanceOrder"
      | "fillWithdrawalOrder"
      | "gasBalanceOf"
      | "getOrder"
      | "getOrders"
      | "getOrdersOf"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getTpslOrders"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "liquidate"
      | "modifyPositionOrder"
      | "multicall"
      | "nextOrderId"
      | "placeLiquidityOrder"
      | "placePositionOrder"
      | "placeRebalanceOrder"
      | "placeWithdrawalOrder"
      | "reallocate"
      | "renounceRole"
      | "revokeRole"
      | "sequence"
      | "setConfig"
      | "setInitialLeverage"
      | "setPrices"
      | "supportsInterface"
      | "transferToken"
      | "transferTokenFrom"
      | "updateBorrowingFee"
      | "withdrawAllCollateral"
      | "withdrawGas"
      | "wrapNative"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "configValue",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositGas",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "donateLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillAdlOrder",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillLiquidityOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      IFacetOpen.ReallocatePositionArgsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPositionOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRebalanceOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fillWithdrawalOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gasBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrders",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrdersOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTpslOrders",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyPositionOrder",
    values: [ModifyPositionOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeLiquidityOrder",
    values: [LiquidityOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "placePositionOrder",
    values: [PositionOrderParamsStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "placeRebalanceOrder",
    values: [RebalanceOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "placeWithdrawalOrder",
    values: [WithdrawalOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "reallocate",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "sequence", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialLeverage",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [PriceRawDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBorrowingFee",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllCollateral",
    values: [WithdrawAllOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawGas",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapNative",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillAdlOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillLiquidityOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPositionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillRebalanceOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillWithdrawalOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTpslOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyPositionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeLiquidityOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placePositionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeRebalanceOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeWithdrawalOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reallocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sequence", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInitialLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBorrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrapNative", data: BytesLike): Result;

  events: {
    "CallbackFailed(address,uint64,bytes)": EventFragment;
    "CancelOrder(address,uint64,tuple)": EventFragment;
    "FillAdlOrder(address,tuple)": EventFragment;
    "FillOrder(address,uint64,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ModifyPositionOrder(address,uint64,tuple)": EventFragment;
    "NewLiquidityOrder(address,uint64,tuple)": EventFragment;
    "NewPositionOrder(address,uint64,tuple)": EventFragment;
    "NewRebalanceOrder(address,uint64,tuple)": EventFragment;
    "NewWithdrawalOrder(address,uint64,tuple)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetValue(bytes32,bytes32)": EventFragment;
    "UpdateSequence(uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallbackFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FillAdlOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FillOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModifyPositionOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidityOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPositionOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRebalanceOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWithdrawalOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetValue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSequence"): EventFragment;
}

export interface CallbackFailedEventObject {
  account: string;
  orderId: BigNumber;
  reason: string;
}
export type CallbackFailedEvent = TypedEvent<
  [string, BigNumber, string],
  CallbackFailedEventObject
>;

export type CallbackFailedEventFilter = TypedEventFilter<CallbackFailedEvent>;

export interface CancelOrderEventObject {
  account: string;
  orderId: BigNumber;
  orderData: OrderDataStructOutput;
}
export type CancelOrderEvent = TypedEvent<
  [string, BigNumber, OrderDataStructOutput],
  CancelOrderEventObject
>;

export type CancelOrderEventFilter = TypedEventFilter<CancelOrderEvent>;

export interface FillAdlOrderEventObject {
  account: string;
  params: AdlOrderParamsStructOutput;
}
export type FillAdlOrderEvent = TypedEvent<
  [string, AdlOrderParamsStructOutput],
  FillAdlOrderEventObject
>;

export type FillAdlOrderEventFilter = TypedEventFilter<FillAdlOrderEvent>;

export interface FillOrderEventObject {
  account: string;
  orderId: BigNumber;
  orderData: OrderDataStructOutput;
}
export type FillOrderEvent = TypedEvent<
  [string, BigNumber, OrderDataStructOutput],
  FillOrderEventObject
>;

export type FillOrderEventFilter = TypedEventFilter<FillOrderEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ModifyPositionOrderEventObject {
  account: string;
  orderId: BigNumber;
  params: ModifyPositionOrderParamsStructOutput;
}
export type ModifyPositionOrderEvent = TypedEvent<
  [string, BigNumber, ModifyPositionOrderParamsStructOutput],
  ModifyPositionOrderEventObject
>;

export type ModifyPositionOrderEventFilter =
  TypedEventFilter<ModifyPositionOrderEvent>;

export interface NewLiquidityOrderEventObject {
  account: string;
  orderId: BigNumber;
  params: LiquidityOrderParamsStructOutput;
}
export type NewLiquidityOrderEvent = TypedEvent<
  [string, BigNumber, LiquidityOrderParamsStructOutput],
  NewLiquidityOrderEventObject
>;

export type NewLiquidityOrderEventFilter =
  TypedEventFilter<NewLiquidityOrderEvent>;

export interface NewPositionOrderEventObject {
  account: string;
  orderId: BigNumber;
  params: PositionOrderParamsStructOutput;
}
export type NewPositionOrderEvent = TypedEvent<
  [string, BigNumber, PositionOrderParamsStructOutput],
  NewPositionOrderEventObject
>;

export type NewPositionOrderEventFilter =
  TypedEventFilter<NewPositionOrderEvent>;

export interface NewRebalanceOrderEventObject {
  rebalancer: string;
  orderId: BigNumber;
  params: RebalanceOrderParamsStructOutput;
}
export type NewRebalanceOrderEvent = TypedEvent<
  [string, BigNumber, RebalanceOrderParamsStructOutput],
  NewRebalanceOrderEventObject
>;

export type NewRebalanceOrderEventFilter =
  TypedEventFilter<NewRebalanceOrderEvent>;

export interface NewWithdrawalOrderEventObject {
  account: string;
  orderId: BigNumber;
  params: WithdrawalOrderParamsStructOutput;
}
export type NewWithdrawalOrderEvent = TypedEvent<
  [string, BigNumber, WithdrawalOrderParamsStructOutput],
  NewWithdrawalOrderEventObject
>;

export type NewWithdrawalOrderEventFilter =
  TypedEventFilter<NewWithdrawalOrderEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetValueEventObject {
  key: string;
  value: string;
}
export type SetValueEvent = TypedEvent<[string, string], SetValueEventObject>;

export type SetValueEventFilter = TypedEventFilter<SetValueEvent>;

export interface UpdateSequenceEventObject {
  sequence: number;
}
export type UpdateSequenceEvent = TypedEvent<
  [number],
  UpdateSequenceEventObject
>;

export type UpdateSequenceEventFilter = TypedEventFilter<UpdateSequenceEvent>;

export interface OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configValue(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    depositCollateral(
      positionId: PromiseOrValue<BytesLike>,
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositGas(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donateLiquidity(
      poolAddress: PromiseOrValue<string>,
      collateralAddress: PromiseOrValue<string>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillAdlOrder(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillLiquidityOrder(
      orderId: PromiseOrValue<BigNumberish>,
      reallocateArgs: IFacetOpen.ReallocatePositionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillPositionOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillRebalanceOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillWithdrawalOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gasBalanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[OrderDataStructOutput, boolean]>;

    getOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [OrderDataStructOutput[], BigNumber] & {
        orderDataArray: OrderDataStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getOrdersOf(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [OrderDataStructOutput[], BigNumber] & {
        orderDataArray: OrderDataStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTpslOrders(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { orderIds: BigNumber[] }>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      mux3Facet: PromiseOrValue<string>,
      weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      positionId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifyPositionOrder(
      orderParams: ModifyPositionOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      proxyCalls: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    placeLiquidityOrder(
      orderParams: LiquidityOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeRebalanceOrder(
      orderParams: RebalanceOrderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reallocate(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      fromPool: PromiseOrValue<string>,
      toPool: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      lastConsumedToken: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sequence(overrides?: CallOverrides): Promise<[number]>;

    setConfig(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInitialLeverage(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      initialLeverage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrices(
      priceData: PriceRawDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTokenFrom(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBorrowingFee(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAllCollateral(
      orderParams: WithdrawAllOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawGas(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrapNative(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  cancelOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configValue(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  depositCollateral(
    positionId: PromiseOrValue<BytesLike>,
    collateralToken: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositGas(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donateLiquidity(
    poolAddress: PromiseOrValue<string>,
    collateralAddress: PromiseOrValue<string>,
    rawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillAdlOrder(
    positionId: PromiseOrValue<BytesLike>,
    marketId: PromiseOrValue<BytesLike>,
    lastConsumedToken: PromiseOrValue<string>,
    isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
    isUnwrapWeth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillLiquidityOrder(
    orderId: PromiseOrValue<BigNumberish>,
    reallocateArgs: IFacetOpen.ReallocatePositionArgsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillPositionOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillRebalanceOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillWithdrawalOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gasBalanceOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[OrderDataStructOutput, boolean]>;

  getOrders(
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [OrderDataStructOutput[], BigNumber] & {
      orderDataArray: OrderDataStructOutput[];
      totalCount: BigNumber;
    }
  >;

  getOrdersOf(
    user: PromiseOrValue<string>,
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [OrderDataStructOutput[], BigNumber] & {
      orderDataArray: OrderDataStructOutput[];
      totalCount: BigNumber;
    }
  >;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTpslOrders(
    positionId: PromiseOrValue<BytesLike>,
    marketId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    mux3Facet: PromiseOrValue<string>,
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    positionId: PromiseOrValue<BytesLike>,
    lastConsumedToken: PromiseOrValue<string>,
    isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
    isUnwrapWeth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifyPositionOrder(
    orderParams: ModifyPositionOrderParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    proxyCalls: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  placeLiquidityOrder(
    orderParams: LiquidityOrderParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placePositionOrder(
    orderParams: PositionOrderParamsStruct,
    referralCode: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeRebalanceOrder(
    orderParams: RebalanceOrderParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeWithdrawalOrder(
    orderParams: WithdrawalOrderParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reallocate(
    positionId: PromiseOrValue<BytesLike>,
    marketId: PromiseOrValue<BytesLike>,
    fromPool: PromiseOrValue<string>,
    toPool: PromiseOrValue<string>,
    size: PromiseOrValue<BigNumberish>,
    lastConsumedToken: PromiseOrValue<string>,
    isUnwrapWeth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sequence(overrides?: CallOverrides): Promise<number>;

  setConfig(
    key: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInitialLeverage(
    positionId: PromiseOrValue<BytesLike>,
    marketId: PromiseOrValue<BytesLike>,
    initialLeverage: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrices(
    priceData: PriceRawDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferToken(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTokenFrom(
    from: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBorrowingFee(
    positionId: PromiseOrValue<BytesLike>,
    marketId: PromiseOrValue<BytesLike>,
    lastConsumedToken: PromiseOrValue<string>,
    isUnwrapWeth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAllCollateral(
    orderParams: WithdrawAllOrderParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawGas(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrapNative(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    configValue(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    depositCollateral(
      positionId: PromiseOrValue<BytesLike>,
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositGas(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    donateLiquidity(
      poolAddress: PromiseOrValue<string>,
      collateralAddress: PromiseOrValue<string>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillAdlOrder(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillLiquidityOrder(
      orderId: PromiseOrValue<BigNumberish>,
      reallocateArgs: IFacetOpen.ReallocatePositionArgsStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillPositionOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillRebalanceOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillWithdrawalOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gasBalanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[OrderDataStructOutput, boolean]>;

    getOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [OrderDataStructOutput[], BigNumber] & {
        orderDataArray: OrderDataStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getOrdersOf(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [OrderDataStructOutput[], BigNumber] & {
        orderDataArray: OrderDataStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTpslOrders(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      mux3Facet: PromiseOrValue<string>,
      weth: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      positionId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyPositionOrder(
      orderParams: ModifyPositionOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(
      proxyCalls: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    placeLiquidityOrder(
      orderParams: LiquidityOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    placePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    placeRebalanceOrder(
      orderParams: RebalanceOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    placeWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    reallocate(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      fromPool: PromiseOrValue<string>,
      toPool: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      lastConsumedToken: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sequence(overrides?: CallOverrides): Promise<number>;

    setConfig(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialLeverage(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      initialLeverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(
      priceData: PriceRawDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenFrom(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBorrowingFee(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllCollateral(
      orderParams: WithdrawAllOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawGas(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapNative(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CallbackFailed(address,uint64,bytes)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      reason?: null
    ): CallbackFailedEventFilter;
    CallbackFailed(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      reason?: null
    ): CallbackFailedEventFilter;

    "CancelOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      orderData?: null
    ): CancelOrderEventFilter;
    CancelOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      orderData?: null
    ): CancelOrderEventFilter;

    "FillAdlOrder(address,tuple)"(
      account?: PromiseOrValue<string> | null,
      params?: null
    ): FillAdlOrderEventFilter;
    FillAdlOrder(
      account?: PromiseOrValue<string> | null,
      params?: null
    ): FillAdlOrderEventFilter;

    "FillOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      orderData?: null
    ): FillOrderEventFilter;
    FillOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      orderData?: null
    ): FillOrderEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ModifyPositionOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): ModifyPositionOrderEventFilter;
    ModifyPositionOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): ModifyPositionOrderEventFilter;

    "NewLiquidityOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewLiquidityOrderEventFilter;
    NewLiquidityOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewLiquidityOrderEventFilter;

    "NewPositionOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewPositionOrderEventFilter;
    NewPositionOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewPositionOrderEventFilter;

    "NewRebalanceOrder(address,uint64,tuple)"(
      rebalancer?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewRebalanceOrderEventFilter;
    NewRebalanceOrder(
      rebalancer?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewRebalanceOrderEventFilter;

    "NewWithdrawalOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewWithdrawalOrderEventFilter;
    NewWithdrawalOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewWithdrawalOrderEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetValue(bytes32,bytes32)"(key?: null, value?: null): SetValueEventFilter;
    SetValue(key?: null, value?: null): SetValueEventFilter;

    "UpdateSequence(uint32)"(sequence?: null): UpdateSequenceEventFilter;
    UpdateSequence(sequence?: null): UpdateSequenceEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configValue(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      positionId: PromiseOrValue<BytesLike>,
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositGas(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donateLiquidity(
      poolAddress: PromiseOrValue<string>,
      collateralAddress: PromiseOrValue<string>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillAdlOrder(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillLiquidityOrder(
      orderId: PromiseOrValue<BigNumberish>,
      reallocateArgs: IFacetOpen.ReallocatePositionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillPositionOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillRebalanceOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillWithdrawalOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gasBalanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrdersOf(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTpslOrders(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      mux3Facet: PromiseOrValue<string>,
      weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidate(
      positionId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifyPositionOrder(
      orderParams: ModifyPositionOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      proxyCalls: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    placeLiquidityOrder(
      orderParams: LiquidityOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeRebalanceOrder(
      orderParams: RebalanceOrderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reallocate(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      fromPool: PromiseOrValue<string>,
      toPool: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      lastConsumedToken: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sequence(overrides?: CallOverrides): Promise<BigNumber>;

    setConfig(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInitialLeverage(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      initialLeverage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrices(
      priceData: PriceRawDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTokenFrom(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBorrowingFee(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAllCollateral(
      orderParams: WithdrawAllOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawGas(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrapNative(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configValue(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      positionId: PromiseOrValue<BytesLike>,
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositGas(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donateLiquidity(
      poolAddress: PromiseOrValue<string>,
      collateralAddress: PromiseOrValue<string>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillAdlOrder(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillLiquidityOrder(
      orderId: PromiseOrValue<BigNumberish>,
      reallocateArgs: IFacetOpen.ReallocatePositionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillPositionOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillRebalanceOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillWithdrawalOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gasBalanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrdersOf(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTpslOrders(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      mux3Facet: PromiseOrValue<string>,
      weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      positionId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isWithdrawAllIfEmpty: PromiseOrValue<boolean>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifyPositionOrder(
      orderParams: ModifyPositionOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      proxyCalls: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeLiquidityOrder(
      orderParams: LiquidityOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeRebalanceOrder(
      orderParams: RebalanceOrderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reallocate(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      fromPool: PromiseOrValue<string>,
      toPool: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      lastConsumedToken: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sequence(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setConfig(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInitialLeverage(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      initialLeverage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrices(
      priceData: PriceRawDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTokenFrom(
      from: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowingFee(
      positionId: PromiseOrValue<BytesLike>,
      marketId: PromiseOrValue<BytesLike>,
      lastConsumedToken: PromiseOrValue<string>,
      isUnwrapWeth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllCollateral(
      orderParams: WithdrawAllOrderParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawGas(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrapNative(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
