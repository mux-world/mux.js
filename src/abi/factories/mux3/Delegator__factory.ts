/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  Delegator,
  DelegatorInterface,
} from "../../mux3/Delegator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "delegator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "actionCount",
        type: "uint256",
      },
    ],
    name: "SetDelegator",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "actionCount",
        type: "uint256",
      },
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getDelegationByOwner",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "delegator",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "actionCount",
            type: "uint256",
          },
        ],
        internalType: "struct Delegator.Delegation",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "mux3OrderBook",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "proxyCalls",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "orderId",
        type: "uint64",
      },
    ],
    name: "mux3CancelOrder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "positionId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "collateralToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "collateralAmount",
        type: "uint256",
      },
    ],
    name: "mux3DepositCollateral",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mux3DepositGas",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "orderId",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "positionId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "limitPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tpPriceDiff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slPriceDiff",
            type: "uint256",
          },
        ],
        internalType: "struct ModifyPositionOrderParams",
        name: "orderParams",
        type: "tuple",
      },
    ],
    name: "mux3ModifyPositionOrder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "positionId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "marketId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "size",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flags",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "limitPrice",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expiration",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "lastConsumedToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "collateralToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "collateralAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "withdrawUsd",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "withdrawSwapToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "withdrawSwapSlippage",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tpPriceDiff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slPriceDiff",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "tpslExpiration",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "tpslFlags",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tpslWithdrawSwapToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tpslWithdrawSwapSlippage",
            type: "uint256",
          },
        ],
        internalType: "struct PositionOrderParams",
        name: "orderParams",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "referralCode",
        type: "bytes32",
      },
    ],
    name: "mux3PlacePositionOrder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "positionId",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "rawAmount",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isUnwrapWeth",
            type: "bool",
          },
          {
            internalType: "address",
            name: "lastConsumedToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "withdrawSwapToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "withdrawSwapSlippage",
            type: "uint256",
          },
        ],
        internalType: "struct WithdrawalOrderParams",
        name: "orderParams",
        type: "tuple",
      },
    ],
    name: "mux3PlaceWithdrawalOrder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "positionId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "initialLeverage",
        type: "uint256",
      },
    ],
    name: "mux3SetInitialLeverage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mux3TransferToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "positionId",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "isUnwrapWeth",
            type: "bool",
          },
        ],
        internalType: "struct WithdrawAllOrderParams",
        name: "orderParams",
        type: "tuple",
      },
    ],
    name: "mux3WithdrawAllCollateral",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

export class Delegator__factory {
  static readonly abi = _abi;
  static createInterface(): DelegatorInterface {
    return new utils.Interface(_abi) as DelegatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Delegator {
    return new Contract(address, _abi, signerOrProvider) as Delegator;
  }
}
