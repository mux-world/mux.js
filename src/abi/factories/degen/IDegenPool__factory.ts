/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IDegenPool,
  IDegenPoolInterface,
} from "../../degen/IDegenPool";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint8",
        name: "id",
        type: "uint8",
      },
    ],
    name: "AddAsset",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "tokenId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "tokenPrice",
        type: "uint96",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "mlpPrice",
        type: "uint96",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "mlpAmount",
        type: "uint96",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "fee",
        type: "uint96",
      },
    ],
    name: "AddLiquidity",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "transactions",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rawAmount",
        type: "uint256",
      },
    ],
    name: "ClaimBrokerGasRebate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "subAccountId",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "collateralId",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "profitAssetId",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "isLong",
            type: "bool",
          },
          {
            internalType: "uint96",
            name: "amount",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "tradingPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "assetPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "collateralPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "profitAssetPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "fundingFeeUsd",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "paidFeeUsd",
            type: "uint96",
          },
          {
            internalType: "bool",
            name: "hasProfit",
            type: "bool",
          },
          {
            internalType: "uint96",
            name: "pnlUsd",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "remainPosition",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "remainCollateral",
            type: "uint96",
          },
        ],
        indexed: false,
        internalType: "struct ITrade.ClosePositionArgs",
        name: "args",
        type: "tuple",
      },
    ],
    name: "ClosePosition",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "tokenId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "wadFeeCollateral",
        type: "uint96",
      },
    ],
    name: "CollectedFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "collateralId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rawAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "wadAmount",
        type: "uint96",
      },
    ],
    name: "DepositCollateral",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "tokenId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "wadAmount",
        type: "uint96",
      },
    ],
    name: "DonateLiquidity",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "subAccountId",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "collateralId",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "profitAssetId",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "isLong",
            type: "bool",
          },
          {
            internalType: "uint96",
            name: "amount",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "tradingPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "assetPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "collateralPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "profitAssetPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "fundingFeeUsd",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "paidFeeUsd",
            type: "uint96",
          },
          {
            internalType: "bool",
            name: "hasProfit",
            type: "bool",
          },
          {
            internalType: "uint96",
            name: "pnlUsd",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "remainCollateral",
            type: "uint96",
          },
        ],
        indexed: false,
        internalType: "struct ITrade.LiquidateArgs",
        name: "args",
        type: "tuple",
      },
    ],
    name: "Liquidate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "subAccountId",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "collateralId",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "isLong",
            type: "bool",
          },
          {
            internalType: "uint96",
            name: "amount",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "tradingPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "assetPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "collateralPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "newEntryPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "fundingFeeUsd",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "positionFeeUsd",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "remainPosition",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "remainCollateral",
            type: "uint96",
          },
        ],
        indexed: false,
        internalType: "struct ITrade.OpenPositionArgs",
        name: "args",
        type: "tuple",
      },
    ],
    name: "OpenPosition",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "tokenId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "tokenPrice",
        type: "uint96",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "mlpPrice",
        type: "uint96",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "mlpAmount",
        type: "uint96",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "fee",
        type: "uint96",
      },
    ],
    name: "RemoveLiquidity",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint56",
        name: "newFlags",
        type: "uint56",
      },
    ],
    name: "SetAssetFlags",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "keys",
        type: "bytes32[]",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "values",
        type: "bytes32[]",
      },
    ],
    name: "SetAssetParameters",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newMaintainer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enable",
        type: "bool",
      },
    ],
    name: "SetMaintainer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "keys",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enable",
        type: "bool",
      },
    ],
    name: "SetMaintenanceParameters",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "keys",
        type: "bytes32[]",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "values",
        type: "bytes32[]",
      },
    ],
    name: "SetPoolParameters",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint8",
        name: "tokenId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPositiveFundingRate",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "newFundingRateApy",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "newBorrowingRateApy",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "longCumulativeFunding",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "shortCumulativeFunding",
        type: "uint128",
      },
    ],
    name: "UpdateFundingRate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "sequence",
        type: "uint256",
      },
    ],
    name: "UpdateSequence",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "collateralId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rawAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "wadAmount",
        type: "uint96",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "fundingFeeUsd",
        type: "uint96",
      },
    ],
    name: "WithdrawCollateral",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        internalType: "bytes32[]",
        name: "keys",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "values",
        type: "bytes32[]",
      },
    ],
    name: "addAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "tokenId",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "rawAmount",
        type: "uint256",
      },
      {
        internalType: "uint96[]",
        name: "markPrices",
        type: "uint96[]",
      },
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint96",
        name: "mlpAmount",
        type: "uint96",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
    ],
    name: "claimBrokerGasRebate",
    outputs: [
      {
        internalType: "uint256",
        name: "rawAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
      {
        internalType: "uint96",
        name: "amount",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "tradingPrice",
        type: "uint96",
      },
      {
        internalType: "uint8",
        name: "profitAssetId",
        type: "uint8",
      },
      {
        internalType: "uint96[]",
        name: "markPrices",
        type: "uint96[]",
      },
    ],
    name: "closePosition",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "rawAmount",
        type: "uint256",
      },
    ],
    name: "depositCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "diamondOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "tokenId",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "rawAmount",
        type: "uint256",
      },
    ],
    name: "donateLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
    ],
    name: "getAssetFlags",
    outputs: [
      {
        internalType: "uint56",
        name: "",
        type: "uint56",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getAssetParameter",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
    ],
    name: "getAssetStorageV2",
    outputs: [
      {
        internalType: "uint56",
        name: "flags",
        type: "uint56",
      },
      {
        internalType: "uint96",
        name: "spotLiquidity",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "totalLongPosition",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "averageLongPrice",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "totalShortPosition",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "averageShortPrice",
        type: "uint96",
      },
      {
        internalType: "uint128",
        name: "longCumulativeFunding",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "shortCumulativeFunding",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getMaintenanceParameter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint96[]",
        name: "markPrices",
        type: "uint96[]",
      },
    ],
    name: "getMlpPrice",
    outputs: [
      {
        internalType: "uint96",
        name: "mlpPrice",
        type: "uint96",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getPoolParameter",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPoolStorage",
    outputs: [
      {
        internalType: "uint8",
        name: "assetsCount",
        type: "uint8",
      },
      {
        internalType: "uint32",
        name: "sequence",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "lastFundingTime",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "brokerTransactions",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
    ],
    name: "getSubAccount",
    outputs: [
      {
        internalType: "uint96",
        name: "collateral",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "size",
        type: "uint96",
      },
      {
        internalType: "uint32",
        name: "lastIncreasedTime",
        type: "uint32",
      },
      {
        internalType: "uint96",
        name: "entryPrice",
        type: "uint96",
      },
      {
        internalType: "uint128",
        name: "entryFunding",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "begin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "getSubAccountIds",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "subAccountIds",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "totalCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "begin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "getSubAccountIdsOf",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "subAccountIds",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "totalCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
      {
        internalType: "uint96",
        name: "markPrice",
        type: "uint96",
      },
    ],
    name: "isDeleverageAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maintainer",
        type: "address",
      },
    ],
    name: "isMaintainer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "profitAssetId",
        type: "uint8",
      },
      {
        internalType: "uint96",
        name: "tradingPrice",
        type: "uint96",
      },
      {
        internalType: "uint96[]",
        name: "markPrices",
        type: "uint96[]",
      },
    ],
    name: "liquidate",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
      {
        internalType: "uint96",
        name: "amount",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "tradingPrice",
        type: "uint96",
      },
      {
        internalType: "uint96[]",
        name: "markPrices",
        type: "uint96[]",
      },
    ],
    name: "openPosition",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint96",
        name: "mlpAmount",
        type: "uint96",
      },
      {
        internalType: "uint8",
        name: "tokenId",
        type: "uint8",
      },
      {
        internalType: "uint96[]",
        name: "markPrices",
        type: "uint96[]",
      },
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "rawAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "isTradable",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isOpenable",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isShortable",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isEnabled",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isStable",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isStrictStable",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "canAddRemoveLiquidity",
        type: "bool",
      },
    ],
    name: "setAssetFlags",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "assetId",
        type: "uint8",
      },
      {
        internalType: "bytes32[]",
        name: "keys",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "values",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "currentValues",
        type: "bytes32[]",
      },
    ],
    name: "setAssetParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newMaintainer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enable",
        type: "bool",
      },
    ],
    name: "setMaintainer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "keys",
        type: "bytes32[]",
      },
      {
        internalType: "bool",
        name: "enable",
        type: "bool",
      },
    ],
    name: "setMaintenanceParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "keys",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "values",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "currentValues",
        type: "bytes32[]",
      },
    ],
    name: "setPoolParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
      {
        internalType: "uint96",
        name: "price",
        type: "uint96",
      },
    ],
    name: "traderPnl",
    outputs: [
      {
        internalType: "bool",
        name: "hasProfit",
        type: "bool",
      },
      {
        internalType: "uint96",
        name: "positionPnlUsd",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "cappedPnlUsd",
        type: "uint96",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateFundingState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
    ],
    name: "withdrawAllCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subAccountId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "rawAmount",
        type: "uint256",
      },
      {
        internalType: "uint96",
        name: "collateralPrice",
        type: "uint96",
      },
      {
        internalType: "uint96",
        name: "assetPrice",
        type: "uint96",
      },
    ],
    name: "withdrawCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IDegenPool__factory {
  static readonly abi = _abi;
  static createInterface(): IDegenPoolInterface {
    return new utils.Interface(_abi) as IDegenPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDegenPool {
    return new Contract(address, _abi, signerOrProvider) as IDegenPool;
  }
}
