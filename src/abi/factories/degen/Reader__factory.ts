/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Reader, ReaderInterface } from "../../degen/Reader";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IDegenPool",
        name: "pool_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "begin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "getAllSubAccounts",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "subAccountIds",
        type: "bytes32[]",
      },
      {
        components: [
          {
            internalType: "uint96",
            name: "collateral",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "size",
            type: "uint96",
          },
          {
            internalType: "uint32",
            name: "lastIncreasedTime",
            type: "uint32",
          },
          {
            internalType: "uint96",
            name: "entryPrice",
            type: "uint96",
          },
          {
            internalType: "uint128",
            name: "entryFunding",
            type: "uint128",
          },
        ],
        internalType: "struct Reader.SubAccountState[]",
        name: "subAccounts",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "totalCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAssets",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "symbol",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "decimals",
            type: "uint256",
          },
          {
            internalType: "uint96",
            name: "lotSize",
            type: "uint96",
          },
          {
            internalType: "uint32",
            name: "initialMarginRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maintenanceMarginRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "positionFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "minProfitRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "minProfitTime",
            type: "uint32",
          },
          {
            internalType: "uint96",
            name: "maxLongPositionSize",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "maxShortPositionSize",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "fundingAlpha",
            type: "uint96",
          },
          {
            internalType: "uint32",
            name: "fundingBetaApy",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referenceOracleType",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "referenceOracle",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "referenceDeviation",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "adlReserveRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "adlMaxPnlRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "adlTriggerRate",
            type: "uint32",
          },
          {
            internalType: "uint56",
            name: "flags",
            type: "uint56",
          },
          {
            internalType: "uint96",
            name: "spotLiquidity",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "totalLongPosition",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "averageLongPrice",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "totalShortPosition",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "averageShortPrice",
            type: "uint96",
          },
          {
            internalType: "uint128",
            name: "longCumulativeFunding",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "shortCumulativeFunding",
            type: "uint128",
          },
        ],
        internalType: "struct Reader.AssetStorage[]",
        name: "ret",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "subAccountIds",
        type: "bytes32[]",
      },
    ],
    name: "getSubAccounts",
    outputs: [
      {
        components: [
          {
            internalType: "uint96",
            name: "collateral",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "size",
            type: "uint96",
          },
          {
            internalType: "uint32",
            name: "lastIncreasedTime",
            type: "uint32",
          },
          {
            internalType: "uint96",
            name: "entryPrice",
            type: "uint96",
          },
          {
            internalType: "uint128",
            name: "entryFunding",
            type: "uint128",
          },
        ],
        internalType: "struct Reader.SubAccountState[]",
        name: "subAccounts",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "begin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "getSubAccountsOf",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "subAccountIds",
        type: "bytes32[]",
      },
      {
        components: [
          {
            internalType: "uint96",
            name: "collateral",
            type: "uint96",
          },
          {
            internalType: "uint96",
            name: "size",
            type: "uint96",
          },
          {
            internalType: "uint32",
            name: "lastIncreasedTime",
            type: "uint32",
          },
          {
            internalType: "uint96",
            name: "entryPrice",
            type: "uint96",
          },
          {
            internalType: "uint128",
            name: "entryFunding",
            type: "uint128",
          },
        ],
        internalType: "struct Reader.SubAccountState[]",
        name: "subAccounts",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "totalCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "contract IDegenPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class Reader__factory {
  static readonly abi = _abi;
  static createInterface(): ReaderInterface {
    return new utils.Interface(_abi) as ReaderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Reader {
    return new Contract(address, _abi, signerOrProvider) as Reader;
  }
}
