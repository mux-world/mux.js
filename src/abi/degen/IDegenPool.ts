/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ITrade {
  export type ClosePositionArgsStruct = {
    subAccountId: PromiseOrValue<BytesLike>;
    collateralId: PromiseOrValue<BigNumberish>;
    profitAssetId: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    tradingPrice: PromiseOrValue<BigNumberish>;
    assetPrice: PromiseOrValue<BigNumberish>;
    collateralPrice: PromiseOrValue<BigNumberish>;
    profitAssetPrice: PromiseOrValue<BigNumberish>;
    fundingFeeUsd: PromiseOrValue<BigNumberish>;
    paidFeeUsd: PromiseOrValue<BigNumberish>;
    hasProfit: PromiseOrValue<boolean>;
    pnlUsd: PromiseOrValue<BigNumberish>;
    remainPosition: PromiseOrValue<BigNumberish>;
    remainCollateral: PromiseOrValue<BigNumberish>;
  };

  export type ClosePositionArgsStructOutput = [
    string,
    number,
    number,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    subAccountId: string;
    collateralId: number;
    profitAssetId: number;
    isLong: boolean;
    amount: BigNumber;
    tradingPrice: BigNumber;
    assetPrice: BigNumber;
    collateralPrice: BigNumber;
    profitAssetPrice: BigNumber;
    fundingFeeUsd: BigNumber;
    paidFeeUsd: BigNumber;
    hasProfit: boolean;
    pnlUsd: BigNumber;
    remainPosition: BigNumber;
    remainCollateral: BigNumber;
  };

  export type LiquidateArgsStruct = {
    subAccountId: PromiseOrValue<BytesLike>;
    collateralId: PromiseOrValue<BigNumberish>;
    profitAssetId: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    tradingPrice: PromiseOrValue<BigNumberish>;
    assetPrice: PromiseOrValue<BigNumberish>;
    collateralPrice: PromiseOrValue<BigNumberish>;
    profitAssetPrice: PromiseOrValue<BigNumberish>;
    fundingFeeUsd: PromiseOrValue<BigNumberish>;
    paidFeeUsd: PromiseOrValue<BigNumberish>;
    hasProfit: PromiseOrValue<boolean>;
    pnlUsd: PromiseOrValue<BigNumberish>;
    remainCollateral: PromiseOrValue<BigNumberish>;
  };

  export type LiquidateArgsStructOutput = [
    string,
    number,
    number,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    subAccountId: string;
    collateralId: number;
    profitAssetId: number;
    isLong: boolean;
    amount: BigNumber;
    tradingPrice: BigNumber;
    assetPrice: BigNumber;
    collateralPrice: BigNumber;
    profitAssetPrice: BigNumber;
    fundingFeeUsd: BigNumber;
    paidFeeUsd: BigNumber;
    hasProfit: boolean;
    pnlUsd: BigNumber;
    remainCollateral: BigNumber;
  };

  export type OpenPositionArgsStruct = {
    subAccountId: PromiseOrValue<BytesLike>;
    collateralId: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    tradingPrice: PromiseOrValue<BigNumberish>;
    assetPrice: PromiseOrValue<BigNumberish>;
    collateralPrice: PromiseOrValue<BigNumberish>;
    newEntryPrice: PromiseOrValue<BigNumberish>;
    fundingFeeUsd: PromiseOrValue<BigNumberish>;
    positionFeeUsd: PromiseOrValue<BigNumberish>;
    remainPosition: PromiseOrValue<BigNumberish>;
    remainCollateral: PromiseOrValue<BigNumberish>;
  };

  export type OpenPositionArgsStructOutput = [
    string,
    number,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    subAccountId: string;
    collateralId: number;
    isLong: boolean;
    amount: BigNumber;
    tradingPrice: BigNumber;
    assetPrice: BigNumber;
    collateralPrice: BigNumber;
    newEntryPrice: BigNumber;
    fundingFeeUsd: BigNumber;
    positionFeeUsd: BigNumber;
    remainPosition: BigNumber;
    remainCollateral: BigNumber;
  };
}

export interface IDegenPoolInterface extends utils.Interface {
  functions: {
    "addAsset(uint8,bytes32[],bytes32[])": FunctionFragment;
    "addLiquidity(address,uint8,uint256,uint96[])": FunctionFragment;
    "claimBrokerGasRebate(address,uint8)": FunctionFragment;
    "closePosition(bytes32,uint96,uint96,uint8,uint96[])": FunctionFragment;
    "depositCollateral(bytes32,uint256)": FunctionFragment;
    "diamondOwner()": FunctionFragment;
    "donateLiquidity(address,uint8,uint256)": FunctionFragment;
    "getAssetFlags(uint8)": FunctionFragment;
    "getAssetParameter(uint8,bytes32)": FunctionFragment;
    "getAssetStorageV2(uint8)": FunctionFragment;
    "getMaintenanceParameter(bytes32)": FunctionFragment;
    "getMlpPrice(uint96[])": FunctionFragment;
    "getPoolParameter(bytes32)": FunctionFragment;
    "getPoolStorage()": FunctionFragment;
    "getSubAccount(bytes32)": FunctionFragment;
    "getSubAccountIds(uint256,uint256)": FunctionFragment;
    "getSubAccountIdsOf(address,uint256,uint256)": FunctionFragment;
    "isDeleverageAllowed(bytes32,uint96)": FunctionFragment;
    "isMaintainer(address)": FunctionFragment;
    "liquidate(bytes32,uint8,uint96,uint96[])": FunctionFragment;
    "openPosition(bytes32,uint96,uint96,uint96[])": FunctionFragment;
    "removeLiquidity(address,uint96,uint8,uint96[])": FunctionFragment;
    "setAssetFlags(uint8,bool,bool,bool,bool,bool,bool,bool)": FunctionFragment;
    "setAssetParameters(uint8,bytes32[],bytes32[],bytes32[])": FunctionFragment;
    "setMaintainer(address,bool)": FunctionFragment;
    "setMaintenanceParameters(bytes32[],bool)": FunctionFragment;
    "setPoolParameters(bytes32[],bytes32[],bytes32[])": FunctionFragment;
    "traderPnl(bytes32,uint96)": FunctionFragment;
    "updateFundingState()": FunctionFragment;
    "withdrawAllCollateral(bytes32)": FunctionFragment;
    "withdrawCollateral(bytes32,uint256,uint96,uint96)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAsset"
      | "addLiquidity"
      | "claimBrokerGasRebate"
      | "closePosition"
      | "depositCollateral"
      | "diamondOwner"
      | "donateLiquidity"
      | "getAssetFlags"
      | "getAssetParameter"
      | "getAssetStorageV2"
      | "getMaintenanceParameter"
      | "getMlpPrice"
      | "getPoolParameter"
      | "getPoolStorage"
      | "getSubAccount"
      | "getSubAccountIds"
      | "getSubAccountIdsOf"
      | "isDeleverageAllowed"
      | "isMaintainer"
      | "liquidate"
      | "openPosition"
      | "removeLiquidity"
      | "setAssetFlags"
      | "setAssetParameters"
      | "setMaintainer"
      | "setMaintenanceParameters"
      | "setPoolParameters"
      | "traderPnl"
      | "updateFundingState"
      | "withdrawAllCollateral"
      | "withdrawCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAsset",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBrokerGasRebate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donateLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetFlags",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetParameter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetStorageV2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaintenanceParameter",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMlpPrice",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolParameter",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubAccount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubAccountIds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubAccountIdsOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeleverageAllowed",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMaintainer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetFlags",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetParameters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintainer",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintenanceParameters",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolParameters",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "traderPnl",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundingState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllCollateral",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBrokerGasRebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diamondOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetStorageV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaintenanceParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMlpPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubAccountIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubAccountIdsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeleverageAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMaintainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaintainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaintenanceParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "traderPnl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFundingState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;

  events: {
    "AddAsset(uint8)": EventFragment;
    "AddLiquidity(address,uint8,uint96,uint96,uint96,uint96)": EventFragment;
    "ClaimBrokerGasRebate(address,uint32,uint8,uint256)": EventFragment;
    "ClosePosition(address,uint8,tuple)": EventFragment;
    "CollectedFee(uint8,uint96)": EventFragment;
    "DepositCollateral(bytes32,address,uint8,uint256,uint96)": EventFragment;
    "DonateLiquidity(address,uint8,uint96)": EventFragment;
    "Liquidate(address,uint8,tuple)": EventFragment;
    "OpenPosition(address,uint8,tuple)": EventFragment;
    "RemoveLiquidity(address,uint8,uint96,uint96,uint96,uint96)": EventFragment;
    "SetAssetFlags(address,uint8,uint56)": EventFragment;
    "SetAssetParameters(address,uint8,bytes32[],bytes32[])": EventFragment;
    "SetMaintainer(address,bool)": EventFragment;
    "SetMaintenanceParameters(address,bytes32,bool)": EventFragment;
    "SetPoolParameters(address,bytes32[],bytes32[])": EventFragment;
    "UpdateFundingRate(uint8,bool,uint32,uint32,uint128,uint128)": EventFragment;
    "UpdateSequence(uint256)": EventFragment;
    "WithdrawCollateral(bytes32,address,uint8,uint256,uint96,uint96)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimBrokerGasRebate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectedFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonateLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAssetFlags"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAssetParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaintainer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaintenanceParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFundingRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSequence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCollateral"): EventFragment;
}

export interface AddAssetEventObject {
  id: number;
}
export type AddAssetEvent = TypedEvent<[number], AddAssetEventObject>;

export type AddAssetEventFilter = TypedEventFilter<AddAssetEvent>;

export interface AddLiquidityEventObject {
  trader: string;
  tokenId: number;
  tokenPrice: BigNumber;
  mlpPrice: BigNumber;
  mlpAmount: BigNumber;
  fee: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [string, number, BigNumber, BigNumber, BigNumber, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface ClaimBrokerGasRebateEventObject {
  receiver: string;
  transactions: number;
  assetId: number;
  rawAmount: BigNumber;
}
export type ClaimBrokerGasRebateEvent = TypedEvent<
  [string, number, number, BigNumber],
  ClaimBrokerGasRebateEventObject
>;

export type ClaimBrokerGasRebateEventFilter =
  TypedEventFilter<ClaimBrokerGasRebateEvent>;

export interface ClosePositionEventObject {
  trader: string;
  assetId: number;
  args: ITrade.ClosePositionArgsStructOutput;
}
export type ClosePositionEvent = TypedEvent<
  [string, number, ITrade.ClosePositionArgsStructOutput],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface CollectedFeeEventObject {
  tokenId: number;
  wadFeeCollateral: BigNumber;
}
export type CollectedFeeEvent = TypedEvent<
  [number, BigNumber],
  CollectedFeeEventObject
>;

export type CollectedFeeEventFilter = TypedEventFilter<CollectedFeeEvent>;

export interface DepositCollateralEventObject {
  subAccountId: string;
  trader: string;
  collateralId: number;
  rawAmount: BigNumber;
  wadAmount: BigNumber;
}
export type DepositCollateralEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber],
  DepositCollateralEventObject
>;

export type DepositCollateralEventFilter =
  TypedEventFilter<DepositCollateralEvent>;

export interface DonateLiquidityEventObject {
  who: string;
  tokenId: number;
  wadAmount: BigNumber;
}
export type DonateLiquidityEvent = TypedEvent<
  [string, number, BigNumber],
  DonateLiquidityEventObject
>;

export type DonateLiquidityEventFilter = TypedEventFilter<DonateLiquidityEvent>;

export interface LiquidateEventObject {
  trader: string;
  assetId: number;
  args: ITrade.LiquidateArgsStructOutput;
}
export type LiquidateEvent = TypedEvent<
  [string, number, ITrade.LiquidateArgsStructOutput],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface OpenPositionEventObject {
  trader: string;
  assetId: number;
  args: ITrade.OpenPositionArgsStructOutput;
}
export type OpenPositionEvent = TypedEvent<
  [string, number, ITrade.OpenPositionArgsStructOutput],
  OpenPositionEventObject
>;

export type OpenPositionEventFilter = TypedEventFilter<OpenPositionEvent>;

export interface RemoveLiquidityEventObject {
  trader: string;
  tokenId: number;
  tokenPrice: BigNumber;
  mlpPrice: BigNumber;
  mlpAmount: BigNumber;
  fee: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<
  [string, number, BigNumber, BigNumber, BigNumber, BigNumber],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface SetAssetFlagsEventObject {
  operator: string;
  assetId: number;
  newFlags: BigNumber;
}
export type SetAssetFlagsEvent = TypedEvent<
  [string, number, BigNumber],
  SetAssetFlagsEventObject
>;

export type SetAssetFlagsEventFilter = TypedEventFilter<SetAssetFlagsEvent>;

export interface SetAssetParametersEventObject {
  operator: string;
  assetId: number;
  keys: string[];
  values: string[];
}
export type SetAssetParametersEvent = TypedEvent<
  [string, number, string[], string[]],
  SetAssetParametersEventObject
>;

export type SetAssetParametersEventFilter =
  TypedEventFilter<SetAssetParametersEvent>;

export interface SetMaintainerEventObject {
  newMaintainer: string;
  enable: boolean;
}
export type SetMaintainerEvent = TypedEvent<
  [string, boolean],
  SetMaintainerEventObject
>;

export type SetMaintainerEventFilter = TypedEventFilter<SetMaintainerEvent>;

export interface SetMaintenanceParametersEventObject {
  operator: string;
  keys: string;
  enable: boolean;
}
export type SetMaintenanceParametersEvent = TypedEvent<
  [string, string, boolean],
  SetMaintenanceParametersEventObject
>;

export type SetMaintenanceParametersEventFilter =
  TypedEventFilter<SetMaintenanceParametersEvent>;

export interface SetPoolParametersEventObject {
  operator: string;
  keys: string[];
  values: string[];
}
export type SetPoolParametersEvent = TypedEvent<
  [string, string[], string[]],
  SetPoolParametersEventObject
>;

export type SetPoolParametersEventFilter =
  TypedEventFilter<SetPoolParametersEvent>;

export interface UpdateFundingRateEventObject {
  tokenId: number;
  isPositiveFundingRate: boolean;
  newFundingRateApy: number;
  newBorrowingRateApy: number;
  longCumulativeFunding: BigNumber;
  shortCumulativeFunding: BigNumber;
}
export type UpdateFundingRateEvent = TypedEvent<
  [number, boolean, number, number, BigNumber, BigNumber],
  UpdateFundingRateEventObject
>;

export type UpdateFundingRateEventFilter =
  TypedEventFilter<UpdateFundingRateEvent>;

export interface UpdateSequenceEventObject {
  sequence: BigNumber;
}
export type UpdateSequenceEvent = TypedEvent<
  [BigNumber],
  UpdateSequenceEventObject
>;

export type UpdateSequenceEventFilter = TypedEventFilter<UpdateSequenceEvent>;

export interface WithdrawCollateralEventObject {
  subAccountId: string;
  trader: string;
  collateralId: number;
  rawAmount: BigNumber;
  wadAmount: BigNumber;
  fundingFeeUsd: BigNumber;
}
export type WithdrawCollateralEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber, BigNumber],
  WithdrawCollateralEventObject
>;

export type WithdrawCollateralEventFilter =
  TypedEventFilter<WithdrawCollateralEvent>;

export interface IDegenPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDegenPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAsset(
      assetId: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      trader: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimBrokerGasRebate(
      receiver: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      subAccountId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    diamondOwner(overrides?: CallOverrides): Promise<[string]>;

    donateLiquidity(
      who: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssetFlags(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAssetParameter(
      assetId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetStorageV2(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        flags: BigNumber;
        spotLiquidity: BigNumber;
        totalLongPosition: BigNumber;
        averageLongPrice: BigNumber;
        totalShortPosition: BigNumber;
        averageShortPrice: BigNumber;
        longCumulativeFunding: BigNumber;
        shortCumulativeFunding: BigNumber;
      }
    >;

    getMaintenanceParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMlpPrice(
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPoolParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolStorage(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        assetsCount: number;
        sequence: number;
        lastFundingTime: number;
        brokerTransactions: number;
      }
    >;

    getSubAccount(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        collateral: BigNumber;
        size: BigNumber;
        lastIncreasedTime: number;
        entryPrice: BigNumber;
        entryFunding: BigNumber;
      }
    >;

    getSubAccountIds(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & { subAccountIds: string[]; totalCount: BigNumber }
    >;

    getSubAccountIdsOf(
      trader: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & { subAccountIds: string[]; totalCount: BigNumber }
    >;

    isDeleverageAllowed(
      subAccountId: PromiseOrValue<BytesLike>,
      markPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isMaintainer(
      maintainer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidate(
      subAccountId: PromiseOrValue<BytesLike>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      subAccountId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      trader: PromiseOrValue<string>,
      mlpAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAssetFlags(
      assetId: PromiseOrValue<BigNumberish>,
      isTradable: PromiseOrValue<boolean>,
      isOpenable: PromiseOrValue<boolean>,
      isShortable: PromiseOrValue<boolean>,
      isEnabled: PromiseOrValue<boolean>,
      isStable: PromiseOrValue<boolean>,
      isStrictStable: PromiseOrValue<boolean>,
      canAddRemoveLiquidity: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAssetParameters(
      assetId: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      currentValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaintainer(
      newMaintainer: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaintenanceParameters(
      keys: PromiseOrValue<BytesLike>[],
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolParameters(
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      currentValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    traderPnl(
      subAccountId: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFundingState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAllCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      rawAmount: PromiseOrValue<BigNumberish>,
      collateralPrice: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAsset(
    assetId: PromiseOrValue<BigNumberish>,
    keys: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    trader: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    rawAmount: PromiseOrValue<BigNumberish>,
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimBrokerGasRebate(
    receiver: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    subAccountId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    tradingPrice: PromiseOrValue<BigNumberish>,
    profitAssetId: PromiseOrValue<BigNumberish>,
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    subAccountId: PromiseOrValue<BytesLike>,
    rawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  diamondOwner(overrides?: CallOverrides): Promise<string>;

  donateLiquidity(
    who: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    rawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssetFlags(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAssetParameter(
    assetId: PromiseOrValue<BigNumberish>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetStorageV2(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      flags: BigNumber;
      spotLiquidity: BigNumber;
      totalLongPosition: BigNumber;
      averageLongPrice: BigNumber;
      totalShortPosition: BigNumber;
      averageShortPrice: BigNumber;
      longCumulativeFunding: BigNumber;
      shortCumulativeFunding: BigNumber;
    }
  >;

  getMaintenanceParameter(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMlpPrice(
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPoolParameter(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolStorage(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      assetsCount: number;
      sequence: number;
      lastFundingTime: number;
      brokerTransactions: number;
    }
  >;

  getSubAccount(
    subAccountId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      collateral: BigNumber;
      size: BigNumber;
      lastIncreasedTime: number;
      entryPrice: BigNumber;
      entryFunding: BigNumber;
    }
  >;

  getSubAccountIds(
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber] & { subAccountIds: string[]; totalCount: BigNumber }
  >;

  getSubAccountIdsOf(
    trader: PromiseOrValue<string>,
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber] & { subAccountIds: string[]; totalCount: BigNumber }
  >;

  isDeleverageAllowed(
    subAccountId: PromiseOrValue<BytesLike>,
    markPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isMaintainer(
    maintainer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidate(
    subAccountId: PromiseOrValue<BytesLike>,
    profitAssetId: PromiseOrValue<BigNumberish>,
    tradingPrice: PromiseOrValue<BigNumberish>,
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    subAccountId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    tradingPrice: PromiseOrValue<BigNumberish>,
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    trader: PromiseOrValue<string>,
    mlpAmount: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAssetFlags(
    assetId: PromiseOrValue<BigNumberish>,
    isTradable: PromiseOrValue<boolean>,
    isOpenable: PromiseOrValue<boolean>,
    isShortable: PromiseOrValue<boolean>,
    isEnabled: PromiseOrValue<boolean>,
    isStable: PromiseOrValue<boolean>,
    isStrictStable: PromiseOrValue<boolean>,
    canAddRemoveLiquidity: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAssetParameters(
    assetId: PromiseOrValue<BigNumberish>,
    keys: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<BytesLike>[],
    currentValues: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaintainer(
    newMaintainer: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaintenanceParameters(
    keys: PromiseOrValue<BytesLike>[],
    enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolParameters(
    keys: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<BytesLike>[],
    currentValues: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  traderPnl(
    subAccountId: PromiseOrValue<BytesLike>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFundingState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAllCollateral(
    subAccountId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    subAccountId: PromiseOrValue<BytesLike>,
    rawAmount: PromiseOrValue<BigNumberish>,
    collateralPrice: PromiseOrValue<BigNumberish>,
    assetPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAsset(
      assetId: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      trader: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBrokerGasRebate(
      receiver: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      subAccountId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    diamondOwner(overrides?: CallOverrides): Promise<string>;

    donateLiquidity(
      who: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetFlags(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetParameter(
      assetId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetStorageV2(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        flags: BigNumber;
        spotLiquidity: BigNumber;
        totalLongPosition: BigNumber;
        averageLongPrice: BigNumber;
        totalShortPosition: BigNumber;
        averageShortPrice: BigNumber;
        longCumulativeFunding: BigNumber;
        shortCumulativeFunding: BigNumber;
      }
    >;

    getMaintenanceParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMlpPrice(
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolStorage(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        assetsCount: number;
        sequence: number;
        lastFundingTime: number;
        brokerTransactions: number;
      }
    >;

    getSubAccount(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        collateral: BigNumber;
        size: BigNumber;
        lastIncreasedTime: number;
        entryPrice: BigNumber;
        entryFunding: BigNumber;
      }
    >;

    getSubAccountIds(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & { subAccountIds: string[]; totalCount: BigNumber }
    >;

    getSubAccountIdsOf(
      trader: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & { subAccountIds: string[]; totalCount: BigNumber }
    >;

    isDeleverageAllowed(
      subAccountId: PromiseOrValue<BytesLike>,
      markPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMaintainer(
      maintainer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidate(
      subAccountId: PromiseOrValue<BytesLike>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      subAccountId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      trader: PromiseOrValue<string>,
      mlpAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetFlags(
      assetId: PromiseOrValue<BigNumberish>,
      isTradable: PromiseOrValue<boolean>,
      isOpenable: PromiseOrValue<boolean>,
      isShortable: PromiseOrValue<boolean>,
      isEnabled: PromiseOrValue<boolean>,
      isStable: PromiseOrValue<boolean>,
      isStrictStable: PromiseOrValue<boolean>,
      canAddRemoveLiquidity: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetParameters(
      assetId: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      currentValues: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMaintainer(
      newMaintainer: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaintenanceParameters(
      keys: PromiseOrValue<BytesLike>[],
      enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolParameters(
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      currentValues: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    traderPnl(
      subAccountId: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        hasProfit: boolean;
        positionPnlUsd: BigNumber;
        cappedPnlUsd: BigNumber;
      }
    >;

    updateFundingState(overrides?: CallOverrides): Promise<void>;

    withdrawAllCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      rawAmount: PromiseOrValue<BigNumberish>,
      collateralPrice: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddAsset(uint8)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): AddAssetEventFilter;
    AddAsset(id?: PromiseOrValue<BigNumberish> | null): AddAssetEventFilter;

    "AddLiquidity(address,uint8,uint96,uint96,uint96,uint96)"(
      trader?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokenPrice?: null,
      mlpPrice?: null,
      mlpAmount?: null,
      fee?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(
      trader?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokenPrice?: null,
      mlpPrice?: null,
      mlpAmount?: null,
      fee?: null
    ): AddLiquidityEventFilter;

    "ClaimBrokerGasRebate(address,uint32,uint8,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      transactions?: null,
      assetId?: null,
      rawAmount?: null
    ): ClaimBrokerGasRebateEventFilter;
    ClaimBrokerGasRebate(
      receiver?: PromiseOrValue<string> | null,
      transactions?: null,
      assetId?: null,
      rawAmount?: null
    ): ClaimBrokerGasRebateEventFilter;

    "ClosePosition(address,uint8,tuple)"(
      trader?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      args?: null
    ): ClosePositionEventFilter;
    ClosePosition(
      trader?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      args?: null
    ): ClosePositionEventFilter;

    "CollectedFee(uint8,uint96)"(
      tokenId?: null,
      wadFeeCollateral?: null
    ): CollectedFeeEventFilter;
    CollectedFee(
      tokenId?: null,
      wadFeeCollateral?: null
    ): CollectedFeeEventFilter;

    "DepositCollateral(bytes32,address,uint8,uint256,uint96)"(
      subAccountId?: PromiseOrValue<BytesLike> | null,
      trader?: PromiseOrValue<string> | null,
      collateralId?: null,
      rawAmount?: null,
      wadAmount?: null
    ): DepositCollateralEventFilter;
    DepositCollateral(
      subAccountId?: PromiseOrValue<BytesLike> | null,
      trader?: PromiseOrValue<string> | null,
      collateralId?: null,
      rawAmount?: null,
      wadAmount?: null
    ): DepositCollateralEventFilter;

    "DonateLiquidity(address,uint8,uint96)"(
      who?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      wadAmount?: null
    ): DonateLiquidityEventFilter;
    DonateLiquidity(
      who?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      wadAmount?: null
    ): DonateLiquidityEventFilter;

    "Liquidate(address,uint8,tuple)"(
      trader?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      args?: null
    ): LiquidateEventFilter;
    Liquidate(
      trader?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      args?: null
    ): LiquidateEventFilter;

    "OpenPosition(address,uint8,tuple)"(
      trader?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      args?: null
    ): OpenPositionEventFilter;
    OpenPosition(
      trader?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      args?: null
    ): OpenPositionEventFilter;

    "RemoveLiquidity(address,uint8,uint96,uint96,uint96,uint96)"(
      trader?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokenPrice?: null,
      mlpPrice?: null,
      mlpAmount?: null,
      fee?: null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(
      trader?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokenPrice?: null,
      mlpPrice?: null,
      mlpAmount?: null,
      fee?: null
    ): RemoveLiquidityEventFilter;

    "SetAssetFlags(address,uint8,uint56)"(
      operator?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      newFlags?: null
    ): SetAssetFlagsEventFilter;
    SetAssetFlags(
      operator?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      newFlags?: null
    ): SetAssetFlagsEventFilter;

    "SetAssetParameters(address,uint8,bytes32[],bytes32[])"(
      operator?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      keys?: null,
      values?: null
    ): SetAssetParametersEventFilter;
    SetAssetParameters(
      operator?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      keys?: null,
      values?: null
    ): SetAssetParametersEventFilter;

    "SetMaintainer(address,bool)"(
      newMaintainer?: PromiseOrValue<string> | null,
      enable?: null
    ): SetMaintainerEventFilter;
    SetMaintainer(
      newMaintainer?: PromiseOrValue<string> | null,
      enable?: null
    ): SetMaintainerEventFilter;

    "SetMaintenanceParameters(address,bytes32,bool)"(
      operator?: PromiseOrValue<string> | null,
      keys?: null,
      enable?: null
    ): SetMaintenanceParametersEventFilter;
    SetMaintenanceParameters(
      operator?: PromiseOrValue<string> | null,
      keys?: null,
      enable?: null
    ): SetMaintenanceParametersEventFilter;

    "SetPoolParameters(address,bytes32[],bytes32[])"(
      operator?: PromiseOrValue<string> | null,
      keys?: null,
      values?: null
    ): SetPoolParametersEventFilter;
    SetPoolParameters(
      operator?: PromiseOrValue<string> | null,
      keys?: null,
      values?: null
    ): SetPoolParametersEventFilter;

    "UpdateFundingRate(uint8,bool,uint32,uint32,uint128,uint128)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      isPositiveFundingRate?: null,
      newFundingRateApy?: null,
      newBorrowingRateApy?: null,
      longCumulativeFunding?: null,
      shortCumulativeFunding?: null
    ): UpdateFundingRateEventFilter;
    UpdateFundingRate(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      isPositiveFundingRate?: null,
      newFundingRateApy?: null,
      newBorrowingRateApy?: null,
      longCumulativeFunding?: null,
      shortCumulativeFunding?: null
    ): UpdateFundingRateEventFilter;

    "UpdateSequence(uint256)"(sequence?: null): UpdateSequenceEventFilter;
    UpdateSequence(sequence?: null): UpdateSequenceEventFilter;

    "WithdrawCollateral(bytes32,address,uint8,uint256,uint96,uint96)"(
      subAccountId?: PromiseOrValue<BytesLike> | null,
      trader?: PromiseOrValue<string> | null,
      collateralId?: null,
      rawAmount?: null,
      wadAmount?: null,
      fundingFeeUsd?: null
    ): WithdrawCollateralEventFilter;
    WithdrawCollateral(
      subAccountId?: PromiseOrValue<BytesLike> | null,
      trader?: PromiseOrValue<string> | null,
      collateralId?: null,
      rawAmount?: null,
      wadAmount?: null,
      fundingFeeUsd?: null
    ): WithdrawCollateralEventFilter;
  };

  estimateGas: {
    addAsset(
      assetId: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      trader: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimBrokerGasRebate(
      receiver: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closePosition(
      subAccountId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    diamondOwner(overrides?: CallOverrides): Promise<BigNumber>;

    donateLiquidity(
      who: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssetFlags(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetParameter(
      assetId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetStorageV2(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaintenanceParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMlpPrice(
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPoolParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolStorage(overrides?: CallOverrides): Promise<BigNumber>;

    getSubAccount(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubAccountIds(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubAccountIdsOf(
      trader: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDeleverageAllowed(
      subAccountId: PromiseOrValue<BytesLike>,
      markPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isMaintainer(
      maintainer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      subAccountId: PromiseOrValue<BytesLike>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openPosition(
      subAccountId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      trader: PromiseOrValue<string>,
      mlpAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAssetFlags(
      assetId: PromiseOrValue<BigNumberish>,
      isTradable: PromiseOrValue<boolean>,
      isOpenable: PromiseOrValue<boolean>,
      isShortable: PromiseOrValue<boolean>,
      isEnabled: PromiseOrValue<boolean>,
      isStable: PromiseOrValue<boolean>,
      isStrictStable: PromiseOrValue<boolean>,
      canAddRemoveLiquidity: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAssetParameters(
      assetId: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      currentValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaintainer(
      newMaintainer: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaintenanceParameters(
      keys: PromiseOrValue<BytesLike>[],
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolParameters(
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      currentValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    traderPnl(
      subAccountId: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFundingState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAllCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      rawAmount: PromiseOrValue<BigNumberish>,
      collateralPrice: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      assetId: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      trader: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimBrokerGasRebate(
      receiver: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      subAccountId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    diamondOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donateLiquidity(
      who: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssetFlags(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetParameter(
      assetId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetStorageV2(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaintenanceParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMlpPrice(
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPoolParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubAccount(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubAccountIds(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubAccountIdsOf(
      trader: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeleverageAllowed(
      subAccountId: PromiseOrValue<BytesLike>,
      markPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isMaintainer(
      maintainer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      subAccountId: PromiseOrValue<BytesLike>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      subAccountId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      trader: PromiseOrValue<string>,
      mlpAmount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAssetFlags(
      assetId: PromiseOrValue<BigNumberish>,
      isTradable: PromiseOrValue<boolean>,
      isOpenable: PromiseOrValue<boolean>,
      isShortable: PromiseOrValue<boolean>,
      isEnabled: PromiseOrValue<boolean>,
      isStable: PromiseOrValue<boolean>,
      isStrictStable: PromiseOrValue<boolean>,
      canAddRemoveLiquidity: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAssetParameters(
      assetId: PromiseOrValue<BigNumberish>,
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      currentValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaintainer(
      newMaintainer: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaintenanceParameters(
      keys: PromiseOrValue<BytesLike>[],
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolParameters(
      keys: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      currentValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    traderPnl(
      subAccountId: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFundingState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      rawAmount: PromiseOrValue<BigNumberish>,
      collateralPrice: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
