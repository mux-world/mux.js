/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type OrderDataStruct = {
  account: PromiseOrValue<string>;
  id: PromiseOrValue<BigNumberish>;
  orderType: PromiseOrValue<BigNumberish>;
  version: PromiseOrValue<BigNumberish>;
  placeOrderTime: PromiseOrValue<BigNumberish>;
  payload: PromiseOrValue<BytesLike>;
};

export type OrderDataStructOutput = [
  string,
  BigNumber,
  number,
  number,
  number,
  string
] & {
  account: string;
  id: BigNumber;
  orderType: number;
  version: number;
  placeOrderTime: number;
  payload: string;
};

export type AdlOrderParamsStruct = {
  subAccountId: PromiseOrValue<BytesLike>;
  size: PromiseOrValue<BigNumberish>;
  price: PromiseOrValue<BigNumberish>;
  profitTokenId: PromiseOrValue<BigNumberish>;
};

export type AdlOrderParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  number
] & {
  subAccountId: string;
  size: BigNumber;
  price: BigNumber;
  profitTokenId: number;
};

export type LiquidityOrderParamsStruct = {
  rawAmount: PromiseOrValue<BigNumberish>;
  assetId: PromiseOrValue<BigNumberish>;
  isAdding: PromiseOrValue<boolean>;
};

export type LiquidityOrderParamsStructOutput = [BigNumber, number, boolean] & {
  rawAmount: BigNumber;
  assetId: number;
  isAdding: boolean;
};

export type PositionOrderParamsStruct = {
  subAccountId: PromiseOrValue<BytesLike>;
  collateral: PromiseOrValue<BigNumberish>;
  size: PromiseOrValue<BigNumberish>;
  price: PromiseOrValue<BigNumberish>;
  tpPrice: PromiseOrValue<BigNumberish>;
  slPrice: PromiseOrValue<BigNumberish>;
  expiration: PromiseOrValue<BigNumberish>;
  tpslExpiration: PromiseOrValue<BigNumberish>;
  profitTokenId: PromiseOrValue<BigNumberish>;
  tpslProfitTokenId: PromiseOrValue<BigNumberish>;
  flags: PromiseOrValue<BigNumberish>;
};

export type PositionOrderParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  number
] & {
  subAccountId: string;
  collateral: BigNumber;
  size: BigNumber;
  price: BigNumber;
  tpPrice: BigNumber;
  slPrice: BigNumber;
  expiration: number;
  tpslExpiration: number;
  profitTokenId: number;
  tpslProfitTokenId: number;
  flags: number;
};

export type WithdrawalOrderParamsStruct = {
  subAccountId: PromiseOrValue<BytesLike>;
  rawAmount: PromiseOrValue<BigNumberish>;
  profitTokenId: PromiseOrValue<BigNumberish>;
  isProfit: PromiseOrValue<boolean>;
};

export type WithdrawalOrderParamsStructOutput = [
  string,
  BigNumber,
  number,
  boolean
] & {
  subAccountId: string;
  rawAmount: BigNumber;
  profitTokenId: number;
  isProfit: boolean;
};

export interface OrderBookInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "cancelOrder(uint64)": FunctionFragment;
    "claimBrokerGasRebate(uint8)": FunctionFragment;
    "depositCollateral(bytes32,uint256)": FunctionFragment;
    "donateLiquidity(uint8,uint96)": FunctionFragment;
    "fillAdlOrder((bytes32,uint96,uint96,uint8),uint96,uint96[])": FunctionFragment;
    "fillLiquidityOrder(uint64,uint96[])": FunctionFragment;
    "fillPositionOrder(uint64,uint96,uint96,uint96[])": FunctionFragment;
    "fillWithdrawalOrder(uint64,uint96[])": FunctionFragment;
    "getOrder(uint64)": FunctionFragment;
    "getOrders(uint256,uint256)": FunctionFragment;
    "getOrdersOf(address,uint256,uint256)": FunctionFragment;
    "getParameter(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "liquidate(bytes32,uint8,uint96,uint96[])": FunctionFragment;
    "nextOrderId()": FunctionFragment;
    "pause(uint8,bool)": FunctionFragment;
    "placeLiquidityOrder((uint96,uint8,bool))": FunctionFragment;
    "placePositionOrder((bytes32,uint96,uint96,uint96,uint96,uint96,uint32,uint32,uint8,uint8,uint8),bytes32)": FunctionFragment;
    "placeWithdrawalOrder((bytes32,uint96,uint8,bool))": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setConfig(bytes32,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateFundingState()": FunctionFragment;
    "withdrawAllCollateral(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "cancelOrder"
      | "claimBrokerGasRebate"
      | "depositCollateral"
      | "donateLiquidity"
      | "fillAdlOrder"
      | "fillLiquidityOrder"
      | "fillPositionOrder"
      | "fillWithdrawalOrder"
      | "getOrder"
      | "getOrders"
      | "getOrdersOf"
      | "getParameter"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "liquidate"
      | "nextOrderId"
      | "pause"
      | "placeLiquidityOrder"
      | "placePositionOrder"
      | "placeWithdrawalOrder"
      | "renounceRole"
      | "revokeRole"
      | "setConfig"
      | "supportsInterface"
      | "updateFundingState"
      | "withdrawAllCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBrokerGasRebate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "donateLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fillAdlOrder",
    values: [
      AdlOrderParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillLiquidityOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPositionOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillWithdrawalOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrders",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrdersOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getParameter",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "placeLiquidityOrder",
    values: [LiquidityOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "placePositionOrder",
    values: [PositionOrderParamsStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "placeWithdrawalOrder",
    values: [WithdrawalOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundingState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllCollateral",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBrokerGasRebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillAdlOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillLiquidityOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPositionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillWithdrawalOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeLiquidityOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placePositionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeWithdrawalOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFundingState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllCollateral",
    data: BytesLike
  ): Result;

  events: {
    "CancelOrder(address,uint64,tuple)": EventFragment;
    "FillAdlOrder(address,tuple)": EventFragment;
    "FillOrder(address,uint64,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewLiquidityOrder(address,uint64,tuple)": EventFragment;
    "NewPositionOrder(address,uint64,tuple)": EventFragment;
    "NewWithdrawalOrder(address,uint64,tuple)": EventFragment;
    "Pause(uint8,bool)": EventFragment;
    "ReportLiquidityOrderPrice(uint64,uint96[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetConfig(bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FillAdlOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FillOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidityOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPositionOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWithdrawalOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportLiquidityOrderPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetConfig"): EventFragment;
}

export interface CancelOrderEventObject {
  account: string;
  orderId: BigNumber;
  orderData: OrderDataStructOutput;
}
export type CancelOrderEvent = TypedEvent<
  [string, BigNumber, OrderDataStructOutput],
  CancelOrderEventObject
>;

export type CancelOrderEventFilter = TypedEventFilter<CancelOrderEvent>;

export interface FillAdlOrderEventObject {
  account: string;
  params: AdlOrderParamsStructOutput;
}
export type FillAdlOrderEvent = TypedEvent<
  [string, AdlOrderParamsStructOutput],
  FillAdlOrderEventObject
>;

export type FillAdlOrderEventFilter = TypedEventFilter<FillAdlOrderEvent>;

export interface FillOrderEventObject {
  account: string;
  orderId: BigNumber;
  orderData: OrderDataStructOutput;
}
export type FillOrderEvent = TypedEvent<
  [string, BigNumber, OrderDataStructOutput],
  FillOrderEventObject
>;

export type FillOrderEventFilter = TypedEventFilter<FillOrderEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewLiquidityOrderEventObject {
  account: string;
  orderId: BigNumber;
  params: LiquidityOrderParamsStructOutput;
}
export type NewLiquidityOrderEvent = TypedEvent<
  [string, BigNumber, LiquidityOrderParamsStructOutput],
  NewLiquidityOrderEventObject
>;

export type NewLiquidityOrderEventFilter =
  TypedEventFilter<NewLiquidityOrderEvent>;

export interface NewPositionOrderEventObject {
  account: string;
  orderId: BigNumber;
  params: PositionOrderParamsStructOutput;
}
export type NewPositionOrderEvent = TypedEvent<
  [string, BigNumber, PositionOrderParamsStructOutput],
  NewPositionOrderEventObject
>;

export type NewPositionOrderEventFilter =
  TypedEventFilter<NewPositionOrderEvent>;

export interface NewWithdrawalOrderEventObject {
  account: string;
  orderId: BigNumber;
  params: WithdrawalOrderParamsStructOutput;
}
export type NewWithdrawalOrderEvent = TypedEvent<
  [string, BigNumber, WithdrawalOrderParamsStructOutput],
  NewWithdrawalOrderEventObject
>;

export type NewWithdrawalOrderEventFilter =
  TypedEventFilter<NewWithdrawalOrderEvent>;

export interface PauseEventObject {
  orderType: number;
  isPaused: boolean;
}
export type PauseEvent = TypedEvent<[number, boolean], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface ReportLiquidityOrderPriceEventObject {
  orderId: BigNumber;
  prices: BigNumber[];
}
export type ReportLiquidityOrderPriceEvent = TypedEvent<
  [BigNumber, BigNumber[]],
  ReportLiquidityOrderPriceEventObject
>;

export type ReportLiquidityOrderPriceEventFilter =
  TypedEventFilter<ReportLiquidityOrderPriceEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetConfigEventObject {
  key: string;
  value: string;
}
export type SetConfigEvent = TypedEvent<[string, string], SetConfigEventObject>;

export type SetConfigEventFilter = TypedEventFilter<SetConfigEvent>;

export interface OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimBrokerGasRebate(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donateLiquidity(
      assetId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillAdlOrder(
      orderParams: AdlOrderParamsStruct,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillLiquidityOrder(
      orderId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillPositionOrder(
      orderId: PromiseOrValue<BigNumberish>,
      filledAmount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillWithdrawalOrder(
      orderId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[OrderDataStructOutput, boolean]>;

    getOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [OrderDataStructOutput[], BigNumber] & {
        orderDataArray: OrderDataStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getOrdersOf(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [OrderDataStructOutput[], BigNumber] & {
        orderDataArray: OrderDataStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      pool: PromiseOrValue<string>,
      mlpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      subAccountId: PromiseOrValue<BytesLike>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      assetPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      orderType: PromiseOrValue<BigNumberish>,
      isPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeLiquidityOrder(
      orderParams: LiquidityOrderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateFundingState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAllCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  cancelOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimBrokerGasRebate(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    subAccountId: PromiseOrValue<BytesLike>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donateLiquidity(
    assetId: PromiseOrValue<BigNumberish>,
    rawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillAdlOrder(
    orderParams: AdlOrderParamsStruct,
    tradingPrice: PromiseOrValue<BigNumberish>,
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillLiquidityOrder(
    orderId: PromiseOrValue<BigNumberish>,
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillPositionOrder(
    orderId: PromiseOrValue<BigNumberish>,
    filledAmount: PromiseOrValue<BigNumberish>,
    tradingPrice: PromiseOrValue<BigNumberish>,
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillWithdrawalOrder(
    orderId: PromiseOrValue<BigNumberish>,
    markPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[OrderDataStructOutput, boolean]>;

  getOrders(
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [OrderDataStructOutput[], BigNumber] & {
      orderDataArray: OrderDataStructOutput[];
      totalCount: BigNumber;
    }
  >;

  getOrdersOf(
    user: PromiseOrValue<string>,
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [OrderDataStructOutput[], BigNumber] & {
      orderDataArray: OrderDataStructOutput[];
      totalCount: BigNumber;
    }
  >;

  getParameter(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    pool: PromiseOrValue<string>,
    mlpToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    subAccountId: PromiseOrValue<BytesLike>,
    profitAssetId: PromiseOrValue<BigNumberish>,
    tradingPrice: PromiseOrValue<BigNumberish>,
    assetPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    orderType: PromiseOrValue<BigNumberish>,
    isPaused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeLiquidityOrder(
    orderParams: LiquidityOrderParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placePositionOrder(
    orderParams: PositionOrderParamsStruct,
    referralCode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeWithdrawalOrder(
    orderParams: WithdrawalOrderParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    key: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateFundingState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAllCollateral(
    subAccountId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBrokerGasRebate(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    donateLiquidity(
      assetId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillAdlOrder(
      orderParams: AdlOrderParamsStruct,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    fillLiquidityOrder(
      orderId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    fillPositionOrder(
      orderId: PromiseOrValue<BigNumberish>,
      filledAmount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    fillWithdrawalOrder(
      orderId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[OrderDataStructOutput, boolean]>;

    getOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [OrderDataStructOutput[], BigNumber] & {
        orderDataArray: OrderDataStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getOrdersOf(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [OrderDataStructOutput[], BigNumber] & {
        orderDataArray: OrderDataStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      pool: PromiseOrValue<string>,
      mlpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      subAccountId: PromiseOrValue<BytesLike>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      assetPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      orderType: PromiseOrValue<BigNumberish>,
      isPaused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    placeLiquidityOrder(
      orderParams: LiquidityOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    placePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    placeWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateFundingState(overrides?: CallOverrides): Promise<void>;

    withdrawAllCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      orderData?: null
    ): CancelOrderEventFilter;
    CancelOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      orderData?: null
    ): CancelOrderEventFilter;

    "FillAdlOrder(address,tuple)"(
      account?: PromiseOrValue<string> | null,
      params?: null
    ): FillAdlOrderEventFilter;
    FillAdlOrder(
      account?: PromiseOrValue<string> | null,
      params?: null
    ): FillAdlOrderEventFilter;

    "FillOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      orderData?: null
    ): FillOrderEventFilter;
    FillOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      orderData?: null
    ): FillOrderEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewLiquidityOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewLiquidityOrderEventFilter;
    NewLiquidityOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewLiquidityOrderEventFilter;

    "NewPositionOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewPositionOrderEventFilter;
    NewPositionOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewPositionOrderEventFilter;

    "NewWithdrawalOrder(address,uint64,tuple)"(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewWithdrawalOrderEventFilter;
    NewWithdrawalOrder(
      account?: PromiseOrValue<string> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): NewWithdrawalOrderEventFilter;

    "Pause(uint8,bool)"(orderType?: null, isPaused?: null): PauseEventFilter;
    Pause(orderType?: null, isPaused?: null): PauseEventFilter;

    "ReportLiquidityOrderPrice(uint64,uint96[])"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      prices?: null
    ): ReportLiquidityOrderPriceEventFilter;
    ReportLiquidityOrderPrice(
      orderId?: PromiseOrValue<BigNumberish> | null,
      prices?: null
    ): ReportLiquidityOrderPriceEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetConfig(bytes32,bytes32)"(
      key?: null,
      value?: null
    ): SetConfigEventFilter;
    SetConfig(key?: null, value?: null): SetConfigEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimBrokerGasRebate(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donateLiquidity(
      assetId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillAdlOrder(
      orderParams: AdlOrderParamsStruct,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillLiquidityOrder(
      orderId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillPositionOrder(
      orderId: PromiseOrValue<BigNumberish>,
      filledAmount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillWithdrawalOrder(
      orderId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrdersOf(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      pool: PromiseOrValue<string>,
      mlpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidate(
      subAccountId: PromiseOrValue<BytesLike>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      assetPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      orderType: PromiseOrValue<BigNumberish>,
      isPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeLiquidityOrder(
      orderParams: LiquidityOrderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFundingState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAllCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimBrokerGasRebate(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donateLiquidity(
      assetId: PromiseOrValue<BigNumberish>,
      rawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillAdlOrder(
      orderParams: AdlOrderParamsStruct,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillLiquidityOrder(
      orderId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillPositionOrder(
      orderId: PromiseOrValue<BigNumberish>,
      filledAmount: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillWithdrawalOrder(
      orderId: PromiseOrValue<BigNumberish>,
      markPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrdersOf(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParameter(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      pool: PromiseOrValue<string>,
      mlpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      subAccountId: PromiseOrValue<BytesLike>,
      profitAssetId: PromiseOrValue<BigNumberish>,
      tradingPrice: PromiseOrValue<BigNumberish>,
      assetPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      orderType: PromiseOrValue<BigNumberish>,
      isPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeLiquidityOrder(
      orderParams: LiquidityOrderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placePositionOrder(
      orderParams: PositionOrderParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeWithdrawalOrder(
      orderParams: WithdrawalOrderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateFundingState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllCollateral(
      subAccountId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
