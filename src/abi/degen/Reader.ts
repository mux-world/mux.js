/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Reader {
  export type SubAccountStateStruct = {
    collateral: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
    lastIncreasedTime: PromiseOrValue<BigNumberish>;
    entryPrice: PromiseOrValue<BigNumberish>;
    entryFunding: PromiseOrValue<BigNumberish>;
  };

  export type SubAccountStateStructOutput = [
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ] & {
    collateral: BigNumber;
    size: BigNumber;
    lastIncreasedTime: number;
    entryPrice: BigNumber;
    entryFunding: BigNumber;
  };

  export type AssetStorageStruct = {
    id: PromiseOrValue<BigNumberish>;
    symbol: PromiseOrValue<BytesLike>;
    tokenAddress: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    lotSize: PromiseOrValue<BigNumberish>;
    initialMarginRate: PromiseOrValue<BigNumberish>;
    maintenanceMarginRate: PromiseOrValue<BigNumberish>;
    positionFeeRate: PromiseOrValue<BigNumberish>;
    liquidationFeeRate: PromiseOrValue<BigNumberish>;
    minProfitRate: PromiseOrValue<BigNumberish>;
    minProfitTime: PromiseOrValue<BigNumberish>;
    maxLongPositionSize: PromiseOrValue<BigNumberish>;
    maxShortPositionSize: PromiseOrValue<BigNumberish>;
    fundingAlpha: PromiseOrValue<BigNumberish>;
    fundingBetaApy: PromiseOrValue<BigNumberish>;
    referenceOracleType: PromiseOrValue<BigNumberish>;
    referenceOracle: PromiseOrValue<string>;
    referenceDeviation: PromiseOrValue<BigNumberish>;
    adlReserveRate: PromiseOrValue<BigNumberish>;
    adlMaxPnlRate: PromiseOrValue<BigNumberish>;
    adlTriggerRate: PromiseOrValue<BigNumberish>;
    flags: PromiseOrValue<BigNumberish>;
    spotLiquidity: PromiseOrValue<BigNumberish>;
    totalLongPosition: PromiseOrValue<BigNumberish>;
    averageLongPrice: PromiseOrValue<BigNumberish>;
    totalShortPosition: PromiseOrValue<BigNumberish>;
    averageShortPrice: PromiseOrValue<BigNumberish>;
    longCumulativeFunding: PromiseOrValue<BigNumberish>;
    shortCumulativeFunding: PromiseOrValue<BigNumberish>;
  };

  export type AssetStorageStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    string,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: number;
    symbol: string;
    tokenAddress: string;
    decimals: BigNumber;
    lotSize: BigNumber;
    initialMarginRate: number;
    maintenanceMarginRate: number;
    positionFeeRate: number;
    liquidationFeeRate: number;
    minProfitRate: number;
    minProfitTime: number;
    maxLongPositionSize: BigNumber;
    maxShortPositionSize: BigNumber;
    fundingAlpha: BigNumber;
    fundingBetaApy: number;
    referenceOracleType: number;
    referenceOracle: string;
    referenceDeviation: number;
    adlReserveRate: number;
    adlMaxPnlRate: number;
    adlTriggerRate: number;
    flags: BigNumber;
    spotLiquidity: BigNumber;
    totalLongPosition: BigNumber;
    averageLongPrice: BigNumber;
    totalShortPosition: BigNumber;
    averageShortPrice: BigNumber;
    longCumulativeFunding: BigNumber;
    shortCumulativeFunding: BigNumber;
  };
}

export interface ReaderInterface extends utils.Interface {
  functions: {
    "getAllSubAccounts(uint256,uint256)": FunctionFragment;
    "getAssets()": FunctionFragment;
    "getSubAccounts(bytes32[])": FunctionFragment;
    "getSubAccountsOf(address,uint256,uint256)": FunctionFragment;
    "pool()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllSubAccounts"
      | "getAssets"
      | "getSubAccounts"
      | "getSubAccountsOf"
      | "pool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllSubAccounts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSubAccounts",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubAccountsOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getAllSubAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubAccountsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;

  events: {};
}

export interface Reader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllSubAccounts(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], Reader.SubAccountStateStructOutput[], BigNumber] & {
        subAccountIds: string[];
        subAccounts: Reader.SubAccountStateStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getAssets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSubAccounts(
      subAccountIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [Reader.SubAccountStateStructOutput[]] & {
        subAccounts: Reader.SubAccountStateStructOutput[];
      }
    >;

    getSubAccountsOf(
      trader: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], Reader.SubAccountStateStructOutput[], BigNumber] & {
        subAccountIds: string[];
        subAccounts: Reader.SubAccountStateStructOutput[];
        totalCount: BigNumber;
      }
    >;

    pool(overrides?: CallOverrides): Promise<[string]>;
  };

  getAllSubAccounts(
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], Reader.SubAccountStateStructOutput[], BigNumber] & {
      subAccountIds: string[];
      subAccounts: Reader.SubAccountStateStructOutput[];
      totalCount: BigNumber;
    }
  >;

  getAssets(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSubAccounts(
    subAccountIds: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<Reader.SubAccountStateStructOutput[]>;

  getSubAccountsOf(
    trader: PromiseOrValue<string>,
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], Reader.SubAccountStateStructOutput[], BigNumber] & {
      subAccountIds: string[];
      subAccounts: Reader.SubAccountStateStructOutput[];
      totalCount: BigNumber;
    }
  >;

  pool(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAllSubAccounts(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], Reader.SubAccountStateStructOutput[], BigNumber] & {
        subAccountIds: string[];
        subAccounts: Reader.SubAccountStateStructOutput[];
        totalCount: BigNumber;
      }
    >;

    getAssets(
      overrides?: CallOverrides
    ): Promise<Reader.AssetStorageStructOutput[]>;

    getSubAccounts(
      subAccountIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<Reader.SubAccountStateStructOutput[]>;

    getSubAccountsOf(
      trader: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], Reader.SubAccountStateStructOutput[], BigNumber] & {
        subAccountIds: string[];
        subAccounts: Reader.SubAccountStateStructOutput[];
        totalCount: BigNumber;
      }
    >;

    pool(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getAllSubAccounts(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSubAccounts(
      subAccountIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubAccountsOf(
      trader: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllSubAccounts(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSubAccounts(
      subAccountIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubAccountsOf(
      trader: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
