/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../common";

export interface FeeDistributorInterface extends utils.Interface {
  contractName: "FeeDistributor";
  functions: {
    "EPOCH_PERIOD()": FunctionFragment;
    "distribute()": FunctionFragment;
    "epochBeginTime()": FunctionFragment;
    "epochEndTime()": FunctionFragment;
    "extraRewardProportion()": FunctionFragment;
    "extraVeRewardRate()": FunctionFragment;
    "holderRewardProportion()": FunctionFragment;
    "initialize(address,address,address,address,uint256)": FunctionFragment;
    "lastTimeRewardApplicable()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "mlpRewardTracker()": FunctionFragment;
    "muxRewardTracker()": FunctionFragment;
    "notifyReward(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingMlpRewards()": FunctionFragment;
    "pendingMuxRewards()": FunctionFragment;
    "pendingRewards()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewardRouter()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setExtraRewardProportion(uint256)": FunctionFragment;
    "setHolderRewardProportion(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EPOCH_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochBeginTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraRewardProportion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraVeRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holderRewardProportion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mlpRewardTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "muxRewardTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingMlpRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMuxRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraRewardProportion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHolderRewardProportion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EPOCH_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochBeginTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraRewardProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraVeRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderRewardProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mlpRewardTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "muxRewardTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingMlpRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMuxRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraRewardProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHolderRewardProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "Distribute(uint256,uint256,uint256,uint256)": EventFragment;
    "NotifyExtraReward(uint256,uint256,uint256,uint256)": EventFragment;
    "NotifyReward(uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetExtraRewardProportion(uint256)": EventFragment;
    "SetHolderRewardProportion(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Distribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotifyExtraReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotifyReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetExtraRewardProportion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHolderRewardProportion"): EventFragment;
}

export type DistributeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    amount: BigNumber;
    toMlpAmount: BigNumber;
    toMuxAmount: BigNumber;
    toPorAmount: BigNumber;
  }
>;

export type DistributeEventFilter = TypedEventFilter<DistributeEvent>;

export type NotifyExtraRewardEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    amount: BigNumber;
    rewardRate: BigNumber;
    _epochBeginTime: BigNumber;
    _epochEndTime: BigNumber;
  }
>;

export type NotifyExtraRewardEventFilter =
  TypedEventFilter<NotifyExtraRewardEvent>;

export type NotifyRewardEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    amount: BigNumber;
    rewardRate: BigNumber;
    _epochBeginTime: BigNumber;
    _epochEndTime: BigNumber;
  }
>;

export type NotifyRewardEventFilter = TypedEventFilter<NotifyRewardEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetExtraRewardProportionEvent = TypedEvent<
  [BigNumber],
  { newProportion: BigNumber }
>;

export type SetExtraRewardProportionEventFilter =
  TypedEventFilter<SetExtraRewardProportionEvent>;

export type SetHolderRewardProportionEvent = TypedEvent<
  [BigNumber],
  { newProportion: BigNumber }
>;

export type SetHolderRewardProportionEventFilter =
  TypedEventFilter<SetHolderRewardProportionEvent>;

export interface FeeDistributor extends BaseContract {
  contractName: "FeeDistributor";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EPOCH_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochBeginTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    extraRewardProportion(overrides?: CallOverrides): Promise<[BigNumber]>;

    extraVeRewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    holderRewardProportion(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _rewardToken: string,
      _rewardRouter: string,
      _mlpFeeTracker: string,
      _veFeeTracker: string,
      _holderRewardProportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mlpRewardTracker(overrides?: CallOverrides): Promise<[string]>;

    muxRewardTracker(overrides?: CallOverrides): Promise<[string]>;

    notifyReward(
      amount: BigNumberish,
      extraVeReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingMlpRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { toMlpAmount: BigNumber }>;

    pendingMuxRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { toMuxAmount: BigNumber }>;

    pendingRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAmount: BigNumber }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRouter(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setExtraRewardProportion(
      _proportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHolderRewardProportion(
      _proportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EPOCH_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  distribute(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochBeginTime(overrides?: CallOverrides): Promise<BigNumber>;

  epochEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  extraRewardProportion(overrides?: CallOverrides): Promise<BigNumber>;

  extraVeRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  holderRewardProportion(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _rewardToken: string,
    _rewardRouter: string,
    _mlpFeeTracker: string,
    _veFeeTracker: string,
    _holderRewardProportion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  mlpRewardTracker(overrides?: CallOverrides): Promise<string>;

  muxRewardTracker(overrides?: CallOverrides): Promise<string>;

  notifyReward(
    amount: BigNumberish,
    extraVeReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingMlpRewards(overrides?: CallOverrides): Promise<BigNumber>;

  pendingMuxRewards(overrides?: CallOverrides): Promise<BigNumber>;

  pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRouter(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setExtraRewardProportion(
    _proportion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHolderRewardProportion(
    _proportion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EPOCH_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(overrides?: CallOverrides): Promise<void>;

    epochBeginTime(overrides?: CallOverrides): Promise<BigNumber>;

    epochEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    extraRewardProportion(overrides?: CallOverrides): Promise<BigNumber>;

    extraVeRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    holderRewardProportion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _rewardToken: string,
      _rewardRouter: string,
      _mlpFeeTracker: string,
      _veFeeTracker: string,
      _holderRewardProportion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    mlpRewardTracker(overrides?: CallOverrides): Promise<string>;

    muxRewardTracker(overrides?: CallOverrides): Promise<string>;

    notifyReward(
      amount: BigNumberish,
      extraVeReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingMlpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMuxRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRouter(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setExtraRewardProportion(
      _proportion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHolderRewardProportion(
      _proportion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Distribute(uint256,uint256,uint256,uint256)"(
      amount?: null,
      toMlpAmount?: null,
      toMuxAmount?: null,
      toPorAmount?: null
    ): DistributeEventFilter;
    Distribute(
      amount?: null,
      toMlpAmount?: null,
      toMuxAmount?: null,
      toPorAmount?: null
    ): DistributeEventFilter;

    "NotifyExtraReward(uint256,uint256,uint256,uint256)"(
      amount?: null,
      rewardRate?: null,
      _epochBeginTime?: null,
      _epochEndTime?: null
    ): NotifyExtraRewardEventFilter;
    NotifyExtraReward(
      amount?: null,
      rewardRate?: null,
      _epochBeginTime?: null,
      _epochEndTime?: null
    ): NotifyExtraRewardEventFilter;

    "NotifyReward(uint256,uint256,uint256,uint256)"(
      amount?: null,
      rewardRate?: null,
      _epochBeginTime?: null,
      _epochEndTime?: null
    ): NotifyRewardEventFilter;
    NotifyReward(
      amount?: null,
      rewardRate?: null,
      _epochBeginTime?: null,
      _epochEndTime?: null
    ): NotifyRewardEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetExtraRewardProportion(uint256)"(
      newProportion?: null
    ): SetExtraRewardProportionEventFilter;
    SetExtraRewardProportion(
      newProportion?: null
    ): SetExtraRewardProportionEventFilter;

    "SetHolderRewardProportion(uint256)"(
      newProportion?: null
    ): SetHolderRewardProportionEventFilter;
    SetHolderRewardProportion(
      newProportion?: null
    ): SetHolderRewardProportionEventFilter;
  };

  estimateGas: {
    EPOCH_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochBeginTime(overrides?: CallOverrides): Promise<BigNumber>;

    epochEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    extraRewardProportion(overrides?: CallOverrides): Promise<BigNumber>;

    extraVeRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    holderRewardProportion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _rewardToken: string,
      _rewardRouter: string,
      _mlpFeeTracker: string,
      _veFeeTracker: string,
      _holderRewardProportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    mlpRewardTracker(overrides?: CallOverrides): Promise<BigNumber>;

    muxRewardTracker(overrides?: CallOverrides): Promise<BigNumber>;

    notifyReward(
      amount: BigNumberish,
      extraVeReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMlpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMuxRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRouter(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setExtraRewardProportion(
      _proportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHolderRewardProportion(
      _proportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EPOCH_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochBeginTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraRewardProportion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraVeRewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holderRewardProportion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _rewardToken: string,
      _rewardRouter: string,
      _mlpFeeTracker: string,
      _veFeeTracker: string,
      _holderRewardProportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mlpRewardTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    muxRewardTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyReward(
      amount: BigNumberish,
      extraVeReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMlpRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMuxRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setExtraRewardProportion(
      _proportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHolderRewardProportion(
      _proportion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
