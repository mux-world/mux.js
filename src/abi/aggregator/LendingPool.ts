/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ILiquidityPool {
  export type AssetStruct = {
    symbol: PromiseOrValue<BytesLike>;
    tokenAddress: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    decimals: PromiseOrValue<BigNumberish>;
    flags: PromiseOrValue<BigNumberish>;
    _flagsPadding: PromiseOrValue<BigNumberish>;
    initialMarginRate: PromiseOrValue<BigNumberish>;
    maintenanceMarginRate: PromiseOrValue<BigNumberish>;
    minProfitRate: PromiseOrValue<BigNumberish>;
    minProfitTime: PromiseOrValue<BigNumberish>;
    positionFeeRate: PromiseOrValue<BigNumberish>;
    referenceOracle: PromiseOrValue<string>;
    referenceDeviation: PromiseOrValue<BigNumberish>;
    referenceOracleType: PromiseOrValue<BigNumberish>;
    halfSpread: PromiseOrValue<BigNumberish>;
    credit: PromiseOrValue<BigNumberish>;
    _reserved2: PromiseOrValue<BigNumberish>;
    collectedFee: PromiseOrValue<BigNumberish>;
    liquidationFeeRate: PromiseOrValue<BigNumberish>;
    spotLiquidity: PromiseOrValue<BigNumberish>;
    maxLongPositionSize: PromiseOrValue<BigNumberish>;
    totalLongPosition: PromiseOrValue<BigNumberish>;
    averageLongPrice: PromiseOrValue<BigNumberish>;
    maxShortPositionSize: PromiseOrValue<BigNumberish>;
    totalShortPosition: PromiseOrValue<BigNumberish>;
    averageShortPrice: PromiseOrValue<BigNumberish>;
    muxTokenAddress: PromiseOrValue<string>;
    spotWeight: PromiseOrValue<BigNumberish>;
    longFundingBaseRate8H: PromiseOrValue<BigNumberish>;
    longFundingLimitRate8H: PromiseOrValue<BigNumberish>;
    longCumulativeFundingRate: PromiseOrValue<BigNumberish>;
    shortCumulativeFunding: PromiseOrValue<BigNumberish>;
  };

  export type AssetStructOutput = [
    string,
    string,
    number,
    number,
    BigNumber,
    number,
    number,
    number,
    number,
    number,
    number,
    string,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    symbol: string;
    tokenAddress: string;
    id: number;
    decimals: number;
    flags: BigNumber;
    _flagsPadding: number;
    initialMarginRate: number;
    maintenanceMarginRate: number;
    minProfitRate: number;
    minProfitTime: number;
    positionFeeRate: number;
    referenceOracle: string;
    referenceDeviation: number;
    referenceOracleType: number;
    halfSpread: number;
    credit: BigNumber;
    _reserved2: BigNumber;
    collectedFee: BigNumber;
    liquidationFeeRate: number;
    spotLiquidity: BigNumber;
    maxLongPositionSize: BigNumber;
    totalLongPosition: BigNumber;
    averageLongPrice: BigNumber;
    maxShortPositionSize: BigNumber;
    totalShortPosition: BigNumber;
    averageShortPrice: BigNumber;
    muxTokenAddress: string;
    spotWeight: number;
    longFundingBaseRate8H: number;
    longFundingLimitRate8H: number;
    longCumulativeFundingRate: BigNumber;
    shortCumulativeFunding: BigNumber;
  };
}

export declare namespace ILendingPool {
  export type BorrowStateStruct = {
    flags: PromiseOrValue<BigNumberish>;
    supplyAmount: PromiseOrValue<BigNumberish>;
    borrowFeeAmount: PromiseOrValue<BigNumberish>;
    totalAmountOut: PromiseOrValue<BigNumberish>;
    totalAmountIn: PromiseOrValue<BigNumberish>;
    badDebtAmount: PromiseOrValue<BigNumberish>;
    __reserves: PromiseOrValue<BytesLike>[];
  };

  export type BorrowStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    flags: BigNumber;
    supplyAmount: BigNumber;
    borrowFeeAmount: BigNumber;
    totalAmountOut: BigNumber;
    totalAmountIn: BigNumber;
    badDebtAmount: BigNumber;
    __reserves: string[];
  };
}

export interface LendingPoolInterface extends utils.Interface {
  functions: {
    "borrowAsset(address,uint8,uint256,uint256)": FunctionFragment;
    "borrowToken(uint256,address,address,uint256,uint256)": FunctionFragment;
    "claimFee(address[])": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "disable(address,uint256)": FunctionFragment;
    "enable(address,uint256)": FunctionFragment;
    "getAssetAddress(uint8)": FunctionFragment;
    "getAssetInfo(uint8)": FunctionFragment;
    "getAvailableLiquidity(address)": FunctionFragment;
    "getBadDebtOf(address)": FunctionFragment;
    "getBorrowStates(address)": FunctionFragment;
    "getDebtStates()": FunctionFragment;
    "getDebtStatesOf(address)": FunctionFragment;
    "getDebtUsdOf(address)": FunctionFragment;
    "getFlagsOf(address)": FunctionFragment;
    "getStatusOf(address)": FunctionFragment;
    "getTotalDebtUsd()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isMaintainer(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayAsset(address,uint8,uint256,uint256,uint256)": FunctionFragment;
    "repayToken(uint256,address,address,uint256,uint256,uint256)": FunctionFragment;
    "setBorrower(address,bool)": FunctionFragment;
    "setMaintainer(address,bool)": FunctionFragment;
    "setSwapRouter(address)": FunctionFragment;
    "swap(bytes,address,address,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowAsset"
      | "borrowToken"
      | "claimFee"
      | "deposit"
      | "disable"
      | "enable"
      | "getAssetAddress"
      | "getAssetInfo"
      | "getAvailableLiquidity"
      | "getBadDebtOf"
      | "getBorrowStates"
      | "getDebtStates"
      | "getDebtStatesOf"
      | "getDebtUsdOf"
      | "getFlagsOf"
      | "getStatusOf"
      | "getTotalDebtUsd"
      | "initialize"
      | "isMaintainer"
      | "owner"
      | "renounceOwnership"
      | "repayAsset"
      | "repayToken"
      | "setBorrower"
      | "setMaintainer"
      | "setSwapRouter"
      | "swap"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableLiquidity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBadDebtOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowStates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtStates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtStatesOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtUsdOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlagsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatusOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebtUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isMaintainer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrower",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintainer",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadDebtOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtStatesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtUsdOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlagsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStatusOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebtUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMaintainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaintainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BorrowToken(address,address,uint256,uint256)": EventFragment;
    "ClaimFee(address,address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RepayToken(address,address,uint256,uint256,uint256)": EventFragment;
    "SetBorrower(address,bool)": EventFragment;
    "SetFlags(address,uint256,uint256,uint256)": EventFragment;
    "SetMaintainer(address,bool)": EventFragment;
    "SetSwapRouter(address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBorrower"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFlags"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaintainer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSwapRouter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface BorrowTokenEventObject {
  borrower: string;
  token: string;
  borrowAmount: BigNumber;
  borrowFee: BigNumber;
}
export type BorrowTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BorrowTokenEventObject
>;

export type BorrowTokenEventFilter = TypedEventFilter<BorrowTokenEvent>;

export interface ClaimFeeEventObject {
  token: string;
  recipient: string;
  amount: BigNumber;
}
export type ClaimFeeEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimFeeEventObject
>;

export type ClaimFeeEventFilter = TypedEventFilter<ClaimFeeEvent>;

export interface DepositEventObject {
  token: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RepayTokenEventObject {
  repayer: string;
  token: string;
  repayAmount: BigNumber;
  borrowFee: BigNumber;
  badDebt: BigNumber;
}
export type RepayTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  RepayTokenEventObject
>;

export type RepayTokenEventFilter = TypedEventFilter<RepayTokenEvent>;

export interface SetBorrowerEventObject {
  borrower: string;
  enabled: boolean;
}
export type SetBorrowerEvent = TypedEvent<
  [string, boolean],
  SetBorrowerEventObject
>;

export type SetBorrowerEventFilter = TypedEventFilter<SetBorrowerEvent>;

export interface SetFlagsEventObject {
  token: string;
  enables: BigNumber;
  disables: BigNumber;
  result: BigNumber;
}
export type SetFlagsEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SetFlagsEventObject
>;

export type SetFlagsEventFilter = TypedEventFilter<SetFlagsEvent>;

export interface SetMaintainerEventObject {
  maintainer: string;
  enabled: boolean;
}
export type SetMaintainerEvent = TypedEvent<
  [string, boolean],
  SetMaintainerEventObject
>;

export type SetMaintainerEventFilter = TypedEventFilter<SetMaintainerEvent>;

export interface SetSwapRouterEventObject {
  swapRouter: string;
}
export type SetSwapRouterEvent = TypedEvent<[string], SetSwapRouterEventObject>;

export type SetSwapRouterEventFilter = TypedEventFilter<SetSwapRouterEvent>;

export interface WithdrawEventObject {
  token: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface LendingPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowAsset(
      borrower: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowToken(
      projectId: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFee(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disable(
      token: PromiseOrValue<string>,
      features: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enable(
      token: PromiseOrValue<string>,
      features: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssetAddress(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetInfo(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILiquidityPool.AssetStructOutput]>;

    getAvailableLiquidity(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBadDebtOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBorrowStates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ILendingPool.BorrowStateStructOutput] & {
        states: ILendingPool.BorrowStateStructOutput;
      }
    >;

    getDebtStates(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getDebtStatesOf(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDebtUsdOf(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFlagsOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStatusOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean] & {
        isEnabled: boolean;
        isBorrowable: boolean;
        isRepayable: boolean;
        isDepositable: boolean;
        isWithdrawable: boolean;
      }
    >;

    getTotalDebtUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      liquidityPool: PromiseOrValue<string>,
      priceHub: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isMaintainer(
      maintainer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayAsset(
      repayer: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      badDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayToken(
      projectId: PromiseOrValue<BigNumberish>,
      repayer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      badDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBorrower(
      borrower: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaintainer(
      maintainer: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapRouter(
      swapRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      swapPath: PromiseOrValue<BytesLike>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  borrowAsset(
    borrower: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    borrowFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowToken(
    projectId: PromiseOrValue<BigNumberish>,
    borrower: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    borrowFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFee(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    token: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disable(
    token: PromiseOrValue<string>,
    features: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enable(
    token: PromiseOrValue<string>,
    features: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssetAddress(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetInfo(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidityPool.AssetStructOutput>;

  getAvailableLiquidity(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBadDebtOf(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowStates(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ILendingPool.BorrowStateStructOutput>;

  getDebtStates(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getDebtStatesOf(
    borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getDebtUsdOf(
    borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFlagsOf(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStatusOf(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean, boolean] & {
      isEnabled: boolean;
      isBorrowable: boolean;
      isRepayable: boolean;
      isDepositable: boolean;
      isWithdrawable: boolean;
    }
  >;

  getTotalDebtUsd(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    liquidityPool: PromiseOrValue<string>,
    priceHub: PromiseOrValue<string>,
    swapRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isMaintainer(
    maintainer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayAsset(
    repayer: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    borrowFee: PromiseOrValue<BigNumberish>,
    badDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayToken(
    projectId: PromiseOrValue<BigNumberish>,
    repayer: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    borrowFee: PromiseOrValue<BigNumberish>,
    badDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBorrower(
    borrower: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaintainer(
    maintainer: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapRouter(
    swapRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    swapPath: PromiseOrValue<BytesLike>,
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: PromiseOrValue<string>,
    withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowAsset(
      borrower: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowToken(
      projectId: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFee(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      token: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disable(
      token: PromiseOrValue<string>,
      features: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enable(
      token: PromiseOrValue<string>,
      features: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetAddress(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetInfo(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidityPool.AssetStructOutput>;

    getAvailableLiquidity(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBadDebtOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowStates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ILendingPool.BorrowStateStructOutput>;

    getDebtStates(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getDebtStatesOf(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDebtUsdOf(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlagsOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean] & {
        isEnabled: boolean;
        isBorrowable: boolean;
        isRepayable: boolean;
        isDepositable: boolean;
        isWithdrawable: boolean;
      }
    >;

    getTotalDebtUsd(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      liquidityPool: PromiseOrValue<string>,
      priceHub: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isMaintainer(
      maintainer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayAsset(
      repayer: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      badDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayToken(
      projectId: PromiseOrValue<BigNumberish>,
      repayer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      badDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBorrower(
      borrower: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaintainer(
      maintainer: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapRouter(
      swapRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      swapPath: PromiseOrValue<BytesLike>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BorrowToken(address,address,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      borrowAmount?: null,
      borrowFee?: null
    ): BorrowTokenEventFilter;
    BorrowToken(
      borrower?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      borrowAmount?: null,
      borrowFee?: null
    ): BorrowTokenEventFilter;

    "ClaimFee(address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      recipient?: null,
      amount?: null
    ): ClaimFeeEventFilter;
    ClaimFee(
      token?: PromiseOrValue<string> | null,
      recipient?: null,
      amount?: null
    ): ClaimFeeEventFilter;

    "Deposit(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RepayToken(address,address,uint256,uint256,uint256)"(
      repayer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      repayAmount?: null,
      borrowFee?: null,
      badDebt?: null
    ): RepayTokenEventFilter;
    RepayToken(
      repayer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      repayAmount?: null,
      borrowFee?: null,
      badDebt?: null
    ): RepayTokenEventFilter;

    "SetBorrower(address,bool)"(
      borrower?: PromiseOrValue<string> | null,
      enabled?: null
    ): SetBorrowerEventFilter;
    SetBorrower(
      borrower?: PromiseOrValue<string> | null,
      enabled?: null
    ): SetBorrowerEventFilter;

    "SetFlags(address,uint256,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      enables?: null,
      disables?: null,
      result?: null
    ): SetFlagsEventFilter;
    SetFlags(
      token?: PromiseOrValue<string> | null,
      enables?: null,
      disables?: null,
      result?: null
    ): SetFlagsEventFilter;

    "SetMaintainer(address,bool)"(
      maintainer?: PromiseOrValue<string> | null,
      enabled?: null
    ): SetMaintainerEventFilter;
    SetMaintainer(
      maintainer?: PromiseOrValue<string> | null,
      enabled?: null
    ): SetMaintainerEventFilter;

    "SetSwapRouter(address)"(
      swapRouter?: PromiseOrValue<string> | null
    ): SetSwapRouterEventFilter;
    SetSwapRouter(
      swapRouter?: PromiseOrValue<string> | null
    ): SetSwapRouterEventFilter;

    "Withdraw(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    borrowAsset(
      borrower: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowToken(
      projectId: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFee(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disable(
      token: PromiseOrValue<string>,
      features: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enable(
      token: PromiseOrValue<string>,
      features: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssetAddress(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetInfo(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableLiquidity(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBadDebtOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowStates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtStates(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtStatesOf(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtUsdOf(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlagsOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtUsd(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      liquidityPool: PromiseOrValue<string>,
      priceHub: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isMaintainer(
      maintainer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayAsset(
      repayer: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      badDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayToken(
      projectId: PromiseOrValue<BigNumberish>,
      repayer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      badDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBorrower(
      borrower: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaintainer(
      maintainer: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapRouter(
      swapRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      swapPath: PromiseOrValue<BytesLike>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowAsset(
      borrower: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowToken(
      projectId: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFee(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disable(
      token: PromiseOrValue<string>,
      features: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enable(
      token: PromiseOrValue<string>,
      features: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssetAddress(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetInfo(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableLiquidity(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBadDebtOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowStates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtStates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtStatesOf(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtUsdOf(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlagsOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatusOf(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebtUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      liquidityPool: PromiseOrValue<string>,
      priceHub: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isMaintainer(
      maintainer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayAsset(
      repayer: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      badDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayToken(
      projectId: PromiseOrValue<BigNumberish>,
      repayer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowFee: PromiseOrValue<BigNumberish>,
      badDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBorrower(
      borrower: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaintainer(
      maintainer: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapRouter(
      swapRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      swapPath: PromiseOrValue<BytesLike>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
